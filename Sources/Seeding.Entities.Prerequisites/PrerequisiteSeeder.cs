using Seeding.Entities.Prerequisites.Templates;
using Seeding.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Templating;
using static Seeding.Entities.Prerequisites.Templates.BooleanPrerequisite;

namespace Seeding.Entities.Prerequisites
{
    public class PrerequisiteTranslator
    {
        public ITemplate<BaseModel>[] Translate(IMustacheTemplater templater, string prerequisite,string builderParameterName)
        {
            return prerequisite switch
            {
                null => Array.Empty<ITemplate<BaseModel>>(),
                "" => Array.Empty<ITemplate<BaseModel>>(),
                "NULL" => Array.Empty<ITemplate<BaseModel>>(),
                _ => GetTemplates(templater, prerequisite, builderParameterName)
            };
        }

        private ITemplate<BaseModel>[] GetTemplates(IMustacheTemplater templater, string prerequisite, string builderParameterName)
        {
            BaseModel[] models = GetMatchModels(templater, prerequisite!);
            foreach(BaseModel model in models)
            {
                model.BuilderParameterName = builderParameterName;
            }

            return models
                .Select(e => new Template<BaseModel>(templater, e))
                .ToArray();
        }

        private BaseModel[] GetMatchModels(IMustacheTemplater templater, string prerequisite)
        {
            return prerequisite switch
            {
                "trained in Nature" => new HaveSpecificSkillProficiency("Trained", "Nature"),
                "trained in at least one skill" => new HaveAnySkillProficiency("Trained"),
                "Intelligence 12" => new HaveSpecificStat(12, "Intelligence"),
                "trained in Acrobatics" => new HaveSpecificSkillProficiency("Trained", "Acrobatics"),
                "expert in Acrobatics" => new HaveSpecificSkillProficiency("Expert", "Acrobatics"),
                "master in Acrobatics" => new HaveSpecificSkillProficiency("Master", "Acrobatics"),
                "trained in Arcana" => new HaveSpecificSkillProficiency("Trained", "Arcana"),
                "trained in a skill with the Recall Knowledge action" => new HaveSpecificRecallKnowledgeProficiency("Trained", false),
                "trained in Arcana, Nature, Occultism, or Religion" => BooleanPrerequisite.Or(templater, new HaveSpecificSkillProficiency("Trained", "Arcana"), new HaveSpecificSkillProficiency("Trained", "Nature"), new HaveSpecificSkillProficiency("Trained", "Occultism"), new HaveSpecificSkillProficiency("Trained", "Religion")),
                "expert in a skill with the Recall Knowledge action, Assurance in that skill" => new HaveSpecificRecallKnowledgeProficiency("Expert", true),
                "expert in Arcana, Nature, Occultism, or Religion" => BooleanPrerequisite.Or(templater, new HaveSpecificSkillProficiency("Expert", "Arcana"), new HaveSpecificSkillProficiency("Expert", "Nature"), new HaveSpecificSkillProficiency("Expert", "Occultism"), new HaveSpecificSkillProficiency("Expert", "Religion")),
                "master in Arcana, Nature, Occultism, or Religion; Recognize Spell" => new BaseModel[]
                {
                    BooleanPrerequisite.Or(templater, new HaveSpecificSkillProficiency("Expert", "Arcana"), new HaveSpecificSkillProficiency("Expert", "Nature"), new HaveSpecificSkillProficiency("Expert", "Occultism"), new HaveSpecificSkillProficiency("Expert", "Religion")) ,
                    new HaveSpecificFeat("RecognizeSpell")
                },
                "legendary in Arcana" => new HaveSpecificSkillProficiency("Legendary", "Arcana"),
                "trained in Athletics" => new HaveSpecificSkillProficiency("Trained", "Athletics"),
                "Charisma 16" => new HaveSpecificStat(16, "Charisma"),
                "expert in Athletics" => new HaveSpecificSkillProficiency("Expert", "Athletics"),
                "master in Athletics" => new HaveSpecificSkillProficiency("Master", "Athletics"),
                "legendary in Athletics" => new HaveSpecificSkillProficiency("Legendary", "Athletics"),
                "trained in Crafting" => new HaveSpecificSkillProficiency("Trained", "Crafting"),
                "expert in Crafting" => new HaveSpecificSkillProficiency("Expert", "Crafting"),
                "master in Crafting, Specialty Crafting" => new BaseModel[]
                {
                    new HaveSpecificSkillProficiency("Master", "Crafting"),
                    new HaveSpecificFeat("SpecialtyCrafting")
                },
                "master in Crafting" => new HaveSpecificSkillProficiency("Master", "Crafting"),
                "legendary in Crafting" => new HaveSpecificSkillProficiency("Legendary", "Crafting"),
                "trained in Deception" => new HaveSpecificSkillProficiency("Trained", "Crafting"),
                "expert in Deception" => new HaveSpecificSkillProficiency("Expert", "Deception"),
                "master in Deception" => new HaveSpecificSkillProficiency("Master", "Deception"),
                "trained in Diplomacy" => new HaveSpecificSkillProficiency("Trained", "Diplomacy"),
                "expert in Diplomacy" => new HaveSpecificSkillProficiency("Expert", "Diplomacy"),
                "master in Diplomacy" => new HaveSpecificSkillProficiency("Master", "Diplomacy"),
                "legendary in Diplomacy" => new HaveSpecificSkillProficiency("Legendary", "Diplomacy"),
                "trained in Intimidation" => new HaveSpecificSkillProficiency("Trained", "Intimidation"),
                "Strength 16, expert in Intimidation" => new BaseModel[]
                {
                    new HaveSpecificStat(16, "Strength"),
                    new HaveSpecificSkillProficiency("Expert", "Intimidation")
                },
                "expert in Intimidation" => new HaveSpecificSkillProficiency("Expert", "Intimidation"),
                "master in Intimidation" => new HaveSpecificSkillProficiency("Master", "Intimidation"),
                "legendary in Intimidation" => new HaveSpecificSkillProficiency("Legendary", "Intimidation"),
                "trained in Medicine" => new HaveSpecificSkillProficiency("Trained", "Medicine"),
                "expert in Medicine" => new HaveSpecificSkillProficiency("Expert", "Medicine"),
                "legendary in Medicine" => new HaveSpecificSkillProficiency("Legendary", "Medicine"),
                "expert in Nature" => new HaveSpecificSkillProficiency("Expert", "Nature"),
                "master in Occultism" => new HaveSpecificSkillProficiency("Master", "Occultism"),
                "trained in Performance" => new HaveSpecificSkillProficiency("Trained", "Performance"),
                "legendary in Performance, Virtuosic Performer" => new BaseModel[]
                {
                    new HaveSpecificSkillProficiency("Legendary", "Performance"),
                    new HaveSpecificFeat("VirtuosicPerformer")
                },
                "legendary in Religion" => new HaveSpecificSkillProficiency("Legendary", "Religion"),
                "trained in Society" => new HaveSpecificSkillProficiency("Trained", "Society"),
                "legendary in Society" => new HaveSpecificSkillProficiency("Legendary", "Society"),
                "trained in Stealth" => new HaveSpecificSkillProficiency("Trained", "Stealth"),
                "expert in Stealth" => new HaveSpecificSkillProficiency("Expert", "Stealth"),
                "master in Stealth" => new HaveSpecificSkillProficiency("Master", "Stealth"),
                "legendary in Stealth, Swift Sneak" => new BaseModel[]
                {
                    new HaveSpecificSkillProficiency("Legendary", "Stealth"),
                    new HaveSpecificFeat("SwiftSneak")
                },
                "trained in Survival" => new HaveSpecificSkillProficiency("Trained", "Survival"),
                "master in Survival" => new HaveSpecificSkillProficiency("Master", "Survival"),
                "legendary in Survival" => new HaveSpecificSkillProficiency("Legendary", "Survival"),
                "trained in Thievery" => new HaveSpecificSkillProficiency("Trained", "Thievery"),
                "expert in Thievery" => new HaveSpecificSkillProficiency("Trained", "Thievery"),
                "master in Thievery" => new HaveSpecificSkillProficiency("Master", "Thievery"),
                "Constitution 14" => new HaveSpecificStat(14, "Constitution"),
                "Dexterity 14" => new HaveSpecificStat(14, "Dexterity"),
                "trained in Lore" => new HaveAnyLoreProficiency("Trained"),
                "master in Perception" => new HaveSpecificSkillProficiency("Master", "Perception"),
                "expert in Lore" => new HaveAnyLoreProficiency("Expert"),
                "legendary in Lore" => new HaveAnyLoreProficiency("Legendary"),
                "Acute Vision or darkvision" => BooleanPrerequisite.Or(templater, new HaveSpecificFeat("AcuteVision"), new HaveSpecificSense("Darkvision", "Precise")),
                "animal instinct" => new HaveSpecificInstinct("AnimalInstinct"),
                "dragon instinct" => new HaveSpecificInstinct("DragonInstinct"),
                "giant instinct" => new HaveSpecificInstinct("GiantInstinct"),
                "spirit instinct" => new HaveSpecificInstinct("SpiritInstinct"),
                "Cleave" => new HaveSpecificFeat("Cleave"),
                "Intimidating Glare" => new HaveSpecificFeat("IntimidatingGlare"),
                "giant instinct, Giantâ€™s Stature" => new BaseModel[]
                {
                    new HaveSpecificInstinct("GiantInstinct"),
                    new HaveSpecificFeat("GiantsStature")
                },
                "Knockback" => new HaveSpecificFeat("Knockback"),
                "Thrash" => new HaveSpecificFeat("Thrash"),
                "dragon instinct, Dragonâ€™s Rage Wings" => new BaseModel[]
                {
                    new HaveSpecificInstinct("DragonInstinct"),
                    new HaveSpecificFeat("DragonsRageWings")
                },
                "Share Rage" => new HaveSpecificFeat("ShareRage"),
                "paladin cause" => new HaveSpecificCause("Paladin"),
                "liberator cause" => new HaveSpecificCause("Liberator"),
                "redeemer cause" => new HaveSpecificCause("Redeemer"),
                "tenets of good" => new HaveSpecificTenet("Good"),
                "devotion spell (lay on hands)" => new HaveSpecificSpell("LayOnHands"),
                "divine ally (steed)" => new HaveSpecificDivineAlly("Steed"),
                "devotion spells, tenets of good" => new BaseModel[]
                {
                    new HaveSpecificClass("Champion"),
                    new HaveSpecificTenet("Good")
                },
                "divine ally (shield), tenets of good" => new BaseModel[]
                {
                    new HaveSpecificDivineAlly("Shield"),
                    new HaveSpecificTenet("Good")
                },
                "divine ally (blade), tenets of good" => new BaseModel[]
                {
                    new HaveSpecificDivineAlly("Blade"),
                    new HaveSpecificTenet("Good")
                },
                "Deity's Domain" => new HaveSpecificFeat("DeitysDomein"),
                "Mercy" => new HaveSpecificFeat("mercy"),
                "divine ally" => new HaveSpecificFeat("DivineAlly"),
                "devotion spells" => new HaveSpecificClass("Champion"),
                "divine ally (steed), Loyal Warhorse" => new BaseModel[]
                {
                    new HaveSpecificDivineAlly("Steed"),
                    new HaveSpecificFeat("LoyalWarhorse")
                },
                "divine ally (blade)" => new HaveSpecificDivineAlly("Blade"),
                "championâ€™s reaction, divine ally (shield), tenets of good, Shield Warden" => new BaseModel[]
                {
                    new HaveSpecificFeat("ChampionsReaction"),
                    new HaveSpecificDivineAlly("Shield"),
                    new HaveSpecificTenet("Good"),
                    new HaveSpecificFeat("ShieldWarden")
                },
                "Fiendsbane Oath" => new HaveSpecificFeat("FiendsbaneOath"),
                "Shining Oath" => new HaveSpecificFeat("ShiningOath"),
                "exalt, Vengeful Oath" => new BaseModel[]
                {
                    new HaveSpecificCause("Paladin"),
                    new HaveSpecificFeat("VengefulOath")
                },
                "Dragonslayer Oath" => new HaveSpecificFeat("VengefulOath"),
                "divine ally (steed), Imposing Destrier" => new BaseModel[]
                {
                    new HaveSpecificDivineAlly("Steed"),
                    new HaveSpecificFeat("ImposingDestrier")
                },
                "Shield Warden" => new HaveSpecificFeat("ShieldWarden"),
                "divine ally (steed), tenets of good" => new BaseModel[]
                {
                    new HaveSpecificDivineAlly("Steed"),
                    new HaveSpecificTenet("Good")
                },
                "divine ally (blade), Radiant Blade Spirit" => new BaseModel[]
                {
                    new HaveSpecificDivineAlly("Blade"),
                    new HaveSpecificFeat("RadiantBladeSpirit")
                },
                "divine ally (shield)" => new HaveSpecificDivineAlly("Shield"),
                "a familiar" => new HaveAnyFamiliar(),
                "bloodline that grants arcane spells" => new HaveSpecificBloodlineTradition("Arcane"),
                "bloodline that grants divine spells" => new HaveSpecificBloodlineTradition("Divine"),
                "bloodline that grants occult spells" => new HaveSpecificBloodlineTradition("Occult."),
                "bloodline that grants primal spells" => new HaveSpecificBloodlineTradition("Primal"),
                "bloodline spell" => new HaveAnyBloodline(),
                "dispel magic in your spell repertoire" => new HaveSpecificSpell("DispelMagic"),
                "Counterspell" => new HaveSpecificFeat("Counterspell"),
                "Arcane Evolution or Occult Evolution" => BooleanPrerequisite.Or(templater, new HaveSpecificFeat("ArcaneEvolution"), new HaveSpecificFeat("OccultEvolution")),
                "Divine Evolution or Primal Evolution" => BooleanPrerequisite.Or(templater, new HaveSpecificFeat("DivineEvolution"), new HaveSpecificFeat("PrimalEvolution")),
                "Bloodline Focus" => new HaveSpecificFeat("BloodlineFocus"),
                "Crossblooded Evolution" => new HaveSpecificFeat("CrossbloodedEvolution"),
                "bloodline paragon" => new HaveSpecificClassFeature("BloodlineParagon", "Sorcerers"),
                "legendary in Society, Multilingual" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Legendary", "Society"), new HaveSpecificFeat("Multilingual")),
                "Ki Strike" => new HaveSpecificFeat("KiStrike"),
                "Flurry of Blows" => new HaveSpecificClassFeature("FlurryOfBlows", "Monks"),
                "ki spells" => new HaveAnyKiSpells(),
                "incredible movement, ki spells" => BooleanPrerequisite.And(templater, new HaveSpecificClassFeature("IncredibleMovement", "Monks"), new HaveAnyKiSpells()),
                "Crane Stance" => new HaveSpecificFeat("CraneStance"),
                "Dragon Stance" => new HaveSpecificFeat("DragonStance"),
                "Mountain Stance" => new HaveSpecificFeat("MountainStance"),
                "Tiger Stance" => new HaveSpecificFeat("TigerStance"),
                "Wolf Stance" => new HaveSpecificFeat("WolfStance"),
                "Deflect Arrow" => new HaveSpecificFeat("DeflectArrow"),
                "Ironblood Stance" => new HaveSpecificFeat("IronbloodStance"),
                "Mountain Stronghold" => new HaveSpecificFeat("MountainStronghold"),
                "Tangled Forest Stance" => new HaveSpecificFeat("TangledForestStance"),
                "Stance Savant" => new HaveSpecificFeat("StanceSavant"),
                "Wild Winds Initiate" => new HaveSpecificFeat("WildWindsInitiate"),
                "Meditative Focus" => new HaveSpecificFeat("MeditativeFocus"),
                "at least two stances" => new HaveSpecificStanceAmount("GreaterThanOrEqualTo", 2),
                "Monster Hunter" => new HaveSpecificFeat("MonsterHunter"),
                "an animal companion" => new HaveAnyAnimalCompanion(),
                "expert in Crafting, Snare Crafting" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Expert", "Crafting"), new HaveSpecificFeat("SnareCrafting")),
                "Animal Companion" => new HaveSpecificFeat("AnimalCompanion"),
                "expert in Crafting, Snare Specialist" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Expert", "Crafting"), new HaveSpecificFeat("SnareSpecialist")),
                "expert in Survival, Experienced Tracker" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Expert", "Survival"), new HaveSpecificFeat("ExperiencedTracker")),
                "weapon specialization" => new HaveSpecificClassFeature("WeaponSpecialization", "TODO"),
                "master in Crafting, Snare Specialist" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Master", "Crafting"), new HaveSpecificFeat("SnareSpecialist")),
                "master in Survival, Favored Terrain" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Master", "Survival"), new HaveSpecificFeat("FavoredTerrain")),
                "Mature Animal Companion" => new HaveSpecificFeat("MatureAnimalCompanion"),
                "master in Nature, Monster Hunter" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Master", "Nature"), new HaveSpecificFeat("MonsterHunter")),
                "master in Crafting, Quick Snares, Snare Specialist" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Master", "Crafting"), new HaveSpecificFeat("QuickSnares"), new HaveSpecificFeat("SnareSpecialist")),
                "Double Prey, Wardenâ€™s Boon" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("DoublePrey"), new HaveSpecificFeat("WardensBoon")),
                "an animal companion, Camouflage" => BooleanPrerequisite.And(templater, new HaveAnyAnimalCompanion(), new HaveSpecificFeat("Camouflage")),
                "Hunterâ€™s Aim" => new HaveSpecificFeat("HuntersAim"),
                "Distracting Shot" => new HaveSpecificFeat("DistractingShot"),
                "Twin Riposte" => new HaveSpecificFeat("TwinRiposte"),
                "legendary in Nature, Master Monster Hunter" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Legendary", "Nature"), new HaveSpecificFeat("MasterMonsterHunter")),
                "Incredible Companion" => new HaveSpecificFeat("IncredibleCompanion"),
                "Snare Specialist" => new HaveSpecificFeat("SnareSpecialist"),
                "hunterâ€™s edge, masterful hunter" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("HuntersEdge"), new HaveSpecificFeat("MastefulHunter")),
                "masterful hunter, Animal Companion" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("MasterfulHunter"), new HaveAnyAnimalCompanion()),
                "Camouflage" => new HaveSpecificFeat("Camouflage"),
                "masterful hunter, legendary in Perception, Far Shot" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("MasterfulHunter"), new HaveSpecificSkillProficiency("Legendary", "Perception"), new HaveSpecificFeat("FarShot")),
                "Shared Prey" => new HaveSpecificFeat("SharedPrey"),
                "wild stride" => new HaveSpecificClassFeature("WildStride", "Rangers"),
                "universalist wizard" => BooleanPrerequisite.And(templater, new HaveSpecificClass("Wizard"), new HaveNoMagicSchool()),
                "arcane bond, arcane school" => BooleanPrerequisite.And(templater, new HaveSpecificClassFeature("ArcaneBond", "Wizards"), new HaveSpecificClassFeature("ArcaneSchool", "Wizards"), new HaveAnyMagicSchool()),
                "Conceal Spell" => new HaveSpecificFeat("ConcealSpell"),
                "arcane school" => BooleanPrerequisite.And(templater, new HaveSpecificClassFeature("ArcaneSchool", "Wizards"), new HaveAnyMagicSchool()),
                "arcane bond" => new HaveSpecificClassFeature("ArcaneBond", "Wizards"),
                "universalist wizard, Hand of the Apprentice" => BooleanPrerequisite.And(templater, new HaveSpecificClass("Wizard"), new HaveNoMagicSchool(), new HaveSpecificFeat("HandOftheApprentice")),
                "Counterspell, Quick Recognition" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("Counterspell"), new HaveSpecificFeat("QuickRecognition")),
                "archwizardâ€™s spellcraft" => new HaveSpecificClassFeature("ArchwizardsSpellcraft", "Wizards"),
                "Strength 14, Charisma 14" => BooleanPrerequisite.And(templater, new HaveSpecificStat(14, "Strength"), new HaveSpecificStat(14, "Charisma")),
                "Champion Dedication" => new HaveSpecificFeat("ChampionDedication"),
                "Basic Devotion" => new HaveSpecificFeat("BasicDevotion"),
                "Champion Dedication, class granting no more Hit Points per level than 8 + your Constitution modifier" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("ChampionDedication"), new Todo()),
                "Champion Dedication, expert in unarmored defense or one or more types of armor" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("ChampionDedication"), new HaveAnyArmorCategorySpecificProficiency("Expert")),
                "Wisdom 14" => new HaveSpecificStat(14, "Wisdom"),
                "Druid Dedication" => new HaveSpecificFeat("DruidDedication"),
                "Basic Druid Spellcasting" => new HaveSpecificFeat("BasicDruidSpellcasting"),
                "Basic Wilding" => new HaveSpecificFeat("BasicWilding"),
                "Basic Druid Spellcasting, master in Nature" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("BasicDruidSpellcasting"), new HaveSpecificSkillProficiency("Master", "Nature")),
                "Expert Druid Spellcasting, legendary in Nature" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Legendary", "Nature")),
                "Charisma 14" => new HaveSpecificStat(14, "Charisma"),
                "Bard Dedication" => new HaveSpecificFeat("BardDedication"),
                "Basic Museâ€™s Whispers" => new HaveSpecificFeat("BasicMusesWhispers"),
                "Basic Bard Spellcasting" => new HaveSpecificFeat("BasicBardSpellcasting"),
                "Basic Bard Spellcasting, master in Occultism" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Master", "Occultism")),
                "Expert Bard Spellcasting, legendary in Occultism" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Legendary", "Occultism")),
                "Strength 14, Dexterity 14" => BooleanPrerequisite.And(templater, new HaveSpecificStat(14, "Strength"), new HaveSpecificStat(14, "Dexterity")),
                "Fighter Dedication" => new HaveSpecificFeat("FighterDedication"),
                "Fighter Dedication, expert in any kind of weapon or unarmed attack" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("FighterDedication"), new HaveAnyWeaponCategorySpecificProficiency("Expert")),
                "Basic Maneuver" => new HaveSpecificFeat("BasicManeuver"),
                "Fighter Dedication, class granting no more Hit Points per level than 8 + your Constitution modifier" => BooleanPrerequisite.And(templater, new Todo()),
                "Monk Dedication" => new HaveSpecificFeat("MonkDedication"),
                "Monk Dedication, class granting no more Hit Points per level than 8 + your Constitution modifier" => BooleanPrerequisite.And(templater, new Todo()),
                "Basic Kata" => new HaveSpecificFeat("BasicKata"),
                "Monk Dedication, expert in at least one saving throw" => BooleanPrerequisite.And(templater, new HaveAnySavingThrowSpecificProficiency("Expert")),
                "Ranger Dedication" => new HaveSpecificFeat("RangerDedication"),
                "Ranger Dedication, class granting no more Hit Points per level than 8 + your Constitution modifier" => BooleanPrerequisite.And(templater, new Todo()),
                "Ranger Dedication, expert in Perception" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("RangerDedication"), new HaveSpecificSkillProficiency("Expert", "Perception")),
                "Basic Hunterâ€™s Trick" => new HaveSpecificFeat("BasicHuntersTrick"),
                "Strength 14, Constitution 14" => BooleanPrerequisite.And(templater, new HaveSpecificStat(14, "Strength"), new HaveSpecificStat(14, "Constitution")),
                "Barbarian Dedication" => new HaveSpecificFeat("BarbarianDedication"),
                "Barbarian Dedication, class granting no more Hit Points per level than 10 + your Constitution modifier" => BooleanPrerequisite.And(templater, new Todo()),
                "Barbarian Dedication, expert in Fortitude saves" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("BarbarianDedication"), new HaveSpecificSavingThrowSpecificProficiency("Expert", "Fortitude")),
                "Basic Fury" => new HaveSpecificFeat("BasicFury"),
                "ruffian racket" => new HaveSpecificRacket("Ruffian"),
                "scoundrel racket" => new HaveSpecificRacket("Scoundrel"),
                "thief racket" => new HaveSpecificRacket("Thief"),
                "Poison Weapon" => new HaveSpecificFeat("PoisonWeapon"),
                "Nimble Dodge" => new HaveSpecificFeat("NimbleDodge"),
                "sneak attack" => new HaveSpecificClassFeature("SneakAttack", "Rogues"),
                "thief racket, Debilitating Strike" => BooleanPrerequisite.And(templater, new HaveSpecificRacket("Thief"), new HaveSpecificFeat("DebilitatingStrike")),
                "scoundrel racket, Debilitating Strike" => BooleanPrerequisite.And(templater, new HaveSpecificRacket("Scoundrel"), new HaveSpecificFeat("DebilitatingStrike")),
                "ruffian racket, Debilitating Strike" => BooleanPrerequisite.And(templater, new HaveSpecificRacket("Ruffian"), new HaveSpecificFeat("DebilitatingStrike")),
                "Debilitating Strike" => new HaveSpecificFeat("DebilitatingStrike"),
                "legendary in Deception" => new HaveSpecificSkillProficiency("Legendary", "Deception"),
                "legendary in Acrobatics" => new HaveSpecificSkillProficiency("Legendary", "Acrobatics"),
                "legendary in Acrobatics, Quick Squeeze" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Legendary", "Acrobatics"), new HaveSpecificFeat("QuickSqueeze")),
                "legendary in Stealth" => new HaveSpecificSkillProficiency("Legendary", "Stealth"),
                "Sly Striker" => new HaveSpecificFeat("SlyStriker"),
                "legendary in Deception, Perfect Distraction" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Legendary", "Deception"), new HaveSpecificFeat("PerfectDistraction")),
                "Rogue Dedication" => new HaveSpecificFeat("RogueDedication"),
                "Rogue Dedication, expert in Reflex saves" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("RogueDedication"), new HaveSpecificSavingThrowSpecificProficiency("Expert", "Reflex")),
                "Basic Trickery" => new HaveSpecificFeat("BasicTrickery"),
                "Rogue Dedication, trained in at least one skill and expert in at least one skill" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("RogueDedication"), 
                    new HaveAnySkillSpecificProficiency("Trained"),
                    new HaveAnySkillSpecificProficiency("Expert")),
                "Intelligence 14" => new HaveSpecificStat(14, "Intelligence"),
                "Wizard Dedication" => new HaveSpecificFeat("WizardDedication"),
                "Basic Arcana" => new HaveSpecificFeat("BasicArcana"),
                "Basic Wizard Spellcasting" => new HaveSpecificFeat("BasicWizardSpellcasting"),
                "Basic Wizard Spellcasting, master in Arcana" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("BasicWizardSpellcasting"), new HaveSpecificSkillProficiency("Master", "Arcana")),
                "Expert Wizard Spellcasting, legendary in Arcana" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("ExpertWizardSpellcasting"), new HaveSpecificSkillProficiency("Legendary", "Arcana")),
                "Cleric Dedication" => new HaveSpecificFeat("ClericDedication"),
                "Basic Dogma" => new HaveSpecificFeat("BasicDogma"),
                "Basic Cleric Spellcasting, master in Religion" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("BasicClericSpellcasting"), new HaveSpecificSkillProficiency("Master", "Religion")),
                "Basic Cleric Spellcasting" => new HaveSpecificFeat("BasicClericSpellcasting"),
                "Expert Cleric Spellcasting, legendary in Religion" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("ExpertClericSpellcasting"), new HaveSpecificSkillProficiency("Legendary", "Religion")),
                "low-light vision" => new HaveSpecificSense("LowLightVision", "Precise"),
                "paddler shoony" => new HaveSpecificHeritage("PaddlerShoony"),
                "Improvisational Defender" => new HaveSpecificFeat("ImprovisationalDefender"),
                "Scamper Underfoot" => new HaveSpecificFeat("ScamperUnderfoot"),
                "Dig Quickly" => new HaveSpecificFeat("DigQuickly"),
                "Handy with Your Paws" => new HaveSpecificFeat("HandyWithYourPaws"),
                "Loyal Empath" => new HaveSpecificFeat("LoyalEmpath"),
                "leaf leshy heritage or Cat Fall skill feat" => BooleanPrerequisite.Or(templater, new HaveSpecificHeritage("LeafLeshy"), new HaveSpecificFeat("CatFall")),
                "Leshy Superstition" => new HaveSpecificFeat("LeshySuperstition"),
                "You have a swim Speed." => new HaveSpecificMovementMethod("Swimming"),
                "Sharp Fangs" => new HaveSpecificFeat("SharpFangs"),
                "cliffscale lizardfolk" => new HaveSpecificHeritage("CliffscaleLizardfolk"),
                "Tail Whip" => new HaveSpecificFeat("TailWhip"),
                "wetlander lizardfolk" => new HaveSpecificHeritage("WetlanderLizardfolk"),
                "Iruxi Unarmed Cunning" => new HaveSpecificFeat("IruxiUnarmedCunning"),
                "Calculated Splash" => new HaveSpecificFeat("CalculatedSplash"),
                "Debilitating Bomb" => new HaveSpecificFeat("DelibitatingBomb"),
                "Powerful Alchemy" => new HaveSpecificFeat("PowerfulAlchecmy"),
                "Far Lobber" => new HaveSpecificFeat("FarLobber"),
                "Merciful Elixir" => new HaveSpecificFeat("MercifulElixir"),
                "Greater Debilitating Bomb" => new HaveSpecificFeat("GreaterDebilitatingBomb"),
                "Extend Elixir" => new HaveSpecificFeat("ExtendElixir"),
                "Expanded Splash" => new HaveSpecificFeat("ExpandedSplash"),
                "Alchemist Dedication" => new HaveSpecificFeat("AlchemistDedication"),
                "Alchemist Dedication, expert in Crafting" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("AlchemistDedication"), new HaveSpecificSkillProficiency("Expert", "Crafting")),
                "Basic Concoction" => new HaveSpecificFeat("BasicConcoction"),
                "Expert Alchemy, master in Crafting" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("ExpertAlchemy"), new HaveSpecificSkillProficiency("Master", "Crafting")),
                "animal order" => new HaveSpecificDruidicOrder("Animal"),
                "leaf order" => new HaveSpecificDruidicOrder("Leaf"),
                "storm order" => new HaveSpecificDruidicOrder("Storm"),
                "wild order" => new HaveSpecificDruidicOrder("Wild"),
                "Strength 14, Wild Shape" => BooleanPrerequisite.And(templater, new HaveSpecificStat(14, "Strength"), new HaveSpecificFeat("WildShape")),
                "Order Explorer" => new HaveSpecificFeat("OrderExplorer"),
                "Wild Shape" => new HaveSpecificFeat("WildShape"),
                "storm order, tempest surge order spell" => BooleanPrerequisite.And(templater, new HaveSpecificDruidicOrder("Storm"), new HaveSpecificSpell("TempestSurge")),
                "leaf order or Wild Shape" => BooleanPrerequisite.Or(templater, new HaveSpecificDruidicOrder("Leaf"), new HaveSpecificDruidicOrder("Wild")),
                "Soaring Shape" => new HaveSpecificFeat("SoaringShape"),
                "Green Empathy" => new HaveSpecificFeat("GreenEmpathy"),
                "Call of the Wild" => new HaveSpecificFeat("CallOfTheWild"),
                "Form Control, Strength 18" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("FormControl"), new HaveSpecificStat(18, "Strength")),
                "Wind Caller" => new HaveSpecificFeat("WindCaller"),
                "Primal Focus" => new HaveSpecificFeat("PrimalFocus"),
                "Dragon Shape, Wild Shape" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("WildShape")),
                "expert in Survival" => new HaveSpecificSkillProficiency("Expert", "Survival"),
                "ability to select ancestry feats from multiple ancestries" => new HaveSpecificAncestryAmount("GreaterThanOrEqualTo", 2),
                "Charisma 14, expert in Stealth and Survival, member of the Bellflower Network" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificStat(14, "Charisma"), 
                    new HaveSpecificSkillProficiency("Expert", "Stealth"), 
                    new HaveSpecificSkillProficiency("Expert", "Survival"), 
                    new Manual("Member of the Bellflower Network")
                ),
                "Bellflower Tiller Dedication" => new HaveSpecificFeat("BellflowerTillerDedication"),
                "Bellflower Tiller Dedication, expert in a melee weapon" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("BellflowerTillerDedication"), 
                    new HaveAnyMeleeWeaponSpecificProficiency("Expert")),
                "enigma muse" => new HaveSpecificMuse("Enigma"),
                "polymath muse" => new HaveSpecificMuse("Polymath"),
                "maestro muse" => new HaveSpecificMuse("Maestro"),
                "polymath muse, master in Occultism" => BooleanPrerequisite.And(templater, new HaveSpecificMuse("Polymath"), new HaveSpecificSkillProficiency("Master", "Occultism")),
                "Esoteric Polymath" => new HaveSpecificFeat("EsotericPolymath"),
                "enigma muse, legendary in Occultism" => BooleanPrerequisite.And(templater, new HaveSpecificMuse("Enigma"), new HaveSpecificSkillProficiency("Legendary", "Occultism")),
                "trained in Arcana, Nature, or Religion; Esoteric Polymath" => BooleanPrerequisite.And(templater, 
                    BooleanPrerequisite.Or(templater,
                        new HaveSpecificSkillProficiency("Trained", "Arcana"),
                        new HaveSpecificSkillProficiency("Trained", "Nature"),
                        new HaveSpecificSkillProficiency("Trained", "Religion")),
                    new HaveSpecificFeat("EsotericPolymath")   
                ),
                "magnum opus" => new HaveSpecificClassFeature("MagnumOpus", "Bards"),
                "Harmonize" => new HaveSpecificFeat("Harmonize"),
                "trained in all martial weapons" => new HaveSpecificWeaponCategorySpecificProficiency("Trained", "Martial"),
                "Hobgoblin Weapon Familiarity" => new HaveSpecificFeat("HobgoblinWeaponFamiliarity"),
                "Formation Training" => new HaveSpecificFeat("FormationTraining"),
                "trained in Elven Lore or Society" => BooleanPrerequisite.Or(templater, new HaveSpecificLoreSpecificProficiency("Trained", "Elven"), new HaveSpecificSkillProficiency("Trained", "Society")),
                "Crystal Keeper Dedication" => new HaveSpecificFeat("CrystalKeeperDedication"),
                "worshipper of Droskar" => new WorshipSpecificDeity("Droskar"),
                "member of the Zephyr Guard" => new Manual("Member of the Zephyr Guard"),
                "Zephyr Guard Dedication" => new HaveSpecificFeat("ZephyrGuardDedication"),
                "Zephyr Guard Dedication, trained in Athletics" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("ZephyrGuardDedication"), new HaveSpecificSkillProficiency("Trained", "Athletics")),
                "Zephyr Guard Dedication, expert in Perception" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("ZephyrGuardDedication"), new HaveSpecificSkillProficiency("Expert", "Perception")),
                "Zephyr Guard Dedication, trained in Intimidation" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("ZephyrGuardDedication"), new HaveSpecificSkillProficiency("Trained", "Intimidation")),
                "Improved Poison Weapon" => new HaveSpecificFeat("ImprovedPoisonWeapon"),
                "Emblazon Armament" => new HaveSpecificFeat("EmblazonArmament"),
                "focus pool" => new HaveFocusPool(),
                "attack of opportunity, Lunge" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("AttackOfOpportunity"), new HaveSpecificFeat("Lunge")),
                "Aggressive Block or Brutish Shove" => BooleanPrerequisite.Or(templater, new HaveSpecificFeat("AggressiveBlock"), new HaveSpecificFeat("BrutishShove")),
                "Power Attack" => new HaveSpecificFeat("PowerAttack"),
                "shield block" => new HaveSpecificFeat("ShieldBlock"),
                "Double Shot" => new HaveSpecificFeat("DoubleShot"),
                "Dueling Parry" => new HaveSpecificFeat("DuelingParry"),
                "shield block, Reactive Shield" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("ShieldBlock"), new HaveSpecificFeat("ReactiveShield")),
                "Knockdown" => new HaveSpecificFeat("Knockdown"),
                "Dueling Riposte" => new HaveSpecificFeat("DuelingRiposte"),
                "Double Slice" => new HaveSpecificFeat("DoubleSlice"),
                "Reflexive Shield" => new HaveSpecificFeat("ReflexiveShield"),
                "Triple Shot" => new HaveSpecificFeat("TripleShot"),
                "Twin Parry" => new HaveSpecificFeat("TwinParry"),
                "Sorcerer Dedication" => new HaveSpecificFeat("SorcererDedication"),
                "Basic Blood Potency" => new HaveSpecificFeat("BasicBloodPotency"),
                "Basic Sorcerer Spellcasting" => new HaveSpecificFeat("BasicSorcererSpellcasting"),
                "Basic Sorcerer Spellcasting; master in Arcana, Nature, Occultism, or Religion, depending on bloodline" => BooleanPrerequisite.And(templater,
                    new HaveSpecificFeat("BasicSorcererSpellcasting"),
                    BooleanPrerequisite.Or(templater, 
                        new HaveSpecificSkillProficiency("Master", "Arcana"), 
                        new HaveSpecificSkillProficiency("Master", "Nature"), 
                        new HaveSpecificSkillProficiency("Master", "Occultism"), 
                        new HaveSpecificSkillProficiency("Master", "Religion")),
                        new Todo()
                    ),
                "Expert Sorcerer Spellcasting; legendary in Arcana, Nature, Occultism, or Religion, depending on bloodline" => BooleanPrerequisite.And(templater,
                    new HaveSpecificFeat("ExpertSorcererSpellcasting"),
                    BooleanPrerequisite.Or(templater,
                        new HaveSpecificSkillProficiency("Legendary", "Arcana"),
                        new HaveSpecificSkillProficiency("Legendary", "Nature"),
                        new HaveSpecificSkillProficiency("Legendary", "Occultism"),
                        new HaveSpecificSkillProficiency("Legendary", "Religion"),
                        new Todo()
                    )
                ),
                "fangs unarmed attack" => new HaveSpecificUnarmedAttack("Fangs"),
                "trained in Occultism" => new HaveSpecificSkillProficiency("Trained", "Occultism"),
                "Angelkin" => new HaveSpecificFeat("Angelkin"),
                "Lawbringer" => new HaveSpecificFeat("DoubleSlice"),
                "Musetouched" => new HaveSpecificFeat("MuseTouched"),
                "any aasimar lineage feat" => new HaveSpecificAncestry("Aasimar"),
                "Celestial Wings" => new HaveSpecificFeat("CelestialWings"),
                "Catfolk Weapon Familiarity" => new HaveSpecificFeat("CatfolkWeaponFamiliarity"),
                "Cat's Luck" => new HaveSpecificFeat("CatsLuck"),
                "claw unarmed attack" => new HaveSpecificUnarmedAttack("Claws"),
                "expert in Occultism" => new HaveSpecificSkillProficiency("Expert", "Occultism"),
                "Grimspawn" => new HaveSpecificFeat("Grimspawn"),
                "Pitborn" => new HaveSpecificFeat("Pitborn"),
                "Hellspawn" => new HaveSpecificFeat("Hellspawn"),
                "any tiefling lineage feat" => new HaveSpecificAncestry("Tiefling"),
                "Fiendish Wings" => new HaveSpecificFeat("FiendishWings"),
                "Tengu Weapon Familiarity" => new HaveSpecificFeat("TenguWeaponFamiliarity"),
                "skyborn tengu heritage" => new HaveSpecificHeritage("SkybornTengu"),
                "Long-Nosed Form" => new HaveSpecificFeat("LongNosedForm"),
                "Orc Weapon Familiarity" => new HaveSpecificFeat("OrcWeaponFamiliarity"),
                "Orc Superstition" => new HaveSpecificFeat("OrcSuperstition"),
                "Orc Ferocity" => new HaveSpecificFeat("OrcFerocity"),
                "Beast Trainer or animal companion, Orc Ferocity" => BooleanPrerequisite.And(templater, 
                    BooleanPrerequisite.Or(templater, 
                        new HaveSpecificFeat("BeastTrainer"), 
                        new HaveSpecificFeat("AnimalCompanion")),
                    new HaveSpecificFeat("OrcFerocity")
                ),
                "Pervasive Superstition" => new HaveSpecificFeat("PervasiveSuperstition"),
                "Cheek Pouches" => new HaveSpecificFeat("CheekPouches"),
                "initial revelation spell" => new HaveSpecificFeat("InitialRevelation"),
                "initial domain spell" => new HaveSpecificFeat("DomainInitiate"),
                "Advanced Revelation" => new HaveSpecificFeat("AdvancedRevelation"),
                "oracular clarity" => new HaveSpecificClassFeature("OracularClarity", "Oracles"),
                "Greater Revelation" => new HaveSpecificFeat("GreaterRevelation"),
                "deity with a simple favored weapon or unarmed attack, trained with your deityâ€™s favored weapon" => BooleanPrerequisite.And(templater, 
                    BooleanPrerequisite.Or(templater,
                      new HaveAnyDeitySpecificWeaponCategory("Simple"),
                      new HaveAnyDeitySpecificWeaponCategory("Unarmed")
                    ),
                    new HaveFavoredWeaponSpecificProficiency("Trained")
                ),
                "Fascinating Performance" => new HaveSpecificFeat("FascinatingPerformance"),
                "precise strike" => new HaveSpecificClassFeature("PreciseStrike", "Swashbucklers"),
                "Confident Finisher" => new HaveSpecificFeat("ConfidentFinisher"),
                "Opportune Riposte" => new HaveSpecificFeat("OpportuneRiposte"),
                "master in Athletics, Flamboyant Athlete" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Master", "Athletics"), new HaveSpecificFeat("FlamboyantAthlete")),
                "Charmed Life" => new HaveSpecificFeat("CharmedLife"),
                "precise strike 6d6" => BooleanPrerequisite.And(templater, new HaveSpecificClassFeature("PreciseStrike", "Swashbucklers"), new HaveSpecificLevel("GreaterThanOrEqualTo", 17)),
                "expert in Society, Courtly Graces" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Expert", "Society"), new HaveSpecificFeat("CourtleyGraces")),
                "Enhanced Familiar" => new HaveSpecificFeat("EnhancedFamiliar"),
                "Cauldron" => new HaveSpecificFeat("Cauldron"),
                "Witchâ€™s Charge" => new HaveSpecificFeat("WitchsCharge"),
                "Hex Focus" => new HaveSpecificFeat("HexFocus"),
                "patronâ€™s gift" => new HaveSpecificClassFeature("PatronsGift", "Witches"),
                "trained in Religion" => new HaveSpecificSkillProficiency("Trained", "Religion"),
                "Kobold Breath" => new HaveSpecificFeat("KoboldBreath"),
                "Dracomancer" => new HaveSpecificFeat("Dracomancer"),
                "Dexterity 16, Fleet" => BooleanPrerequisite.And(templater, new HaveSpecificStat(16, "Dexterity"), new HaveSpecificFeat("Fleet")),
                "expert in Perception" => new HaveSpecificSkillProficiency("Expert", "Perception"),
                "Prescient Planner" => new HaveSpecificFeat("PrescientPlanner"),
                "Constitution 18, Pick Up the Pace" => BooleanPrerequisite.And(templater, new HaveSpecificStat(18, "Constitution"), new HaveSpecificFeat("PickUpThePace")),
                "legendary in Perception" => new HaveSpecificSkillProficiency("Legendary", "Perception"),
                "trained in Athletics or Warfare Lore" => BooleanPrerequisite.Or(templater, new HaveSpecificSkillProficiency("Trained", "Athletics"), new HaveSpecificLoreSpecificProficiency("Trained", "Warfare")),
                "trained in Alcohol Lore, Cooking Lore, or Crafting" => BooleanPrerequisite.Or(templater, 
                    new HaveSpecificLoreSpecificProficiency("Trained", "Alcohol"), 
                    new HaveSpecificLoreSpecificProficiency("Trained", "Cooking"), 
                    new HaveSpecificSkillProficiency("Trained", "Crafting")),
                "expert in Deception or Diplomacy" => BooleanPrerequisite.Or(templater, new HaveSpecificSkillProficiency("Expert", "Deception"), new HaveSpecificSkillProficiency("Expert", "Diplomacy")),
                "expert in Warfare Lore" => new HaveSpecificLoreSpecificProficiency("Expert", "Warfare"),
                "master in Medicine" => new HaveSpecificSkillProficiency("Master", "Medicine"),
                "master in Nature" => new HaveSpecificSkillProficiency("Master", "Nature"),
                "master in Religion" => new HaveSpecificSkillProficiency("Master", "Religion"),
                "expert in Performance" => new HaveSpecificSkillProficiency("Expert", "Performance"),
                "expert in Religion, follower of a specific religion" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Expert", "Religion"), new FollowAnyReligion()),
                "expert in Society, Streetwise" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Expert", "Society"), new HaveSpecificFeat("Streetwise")),
                "master in Society" => new HaveSpecificSkillProficiency("Master", "Society"),
                "Acrobat Dedication" => new HaveSpecificFeat("AcrobatDedication"),
                "Acrobat Dedication, master in Acrobatics" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("AcrobatDedication"), new HaveSpecificSkillProficiency("Master", "Acrobatics")),
                "trained in Perception, Society, and Thievery" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Trained", "Perception"), new HaveSpecificSkillProficiency("Trained", "Society"), new HaveSpecificSkillProficiency("Trained", "Thievery")),
                "Archaeologist Dedication" => new HaveSpecificFeat("ArcheologistDedication"),
                "Archaeologist Dedication, master in Society" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("ArchaeologistDedication"), new HaveSpecificSkillProficiency("Master", "Society")),
                "Archaeologist Dedication, Magical Scholastics" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("ArchaelogistDedication")),
                "Archer Dedication" => new HaveSpecificFeat("ArcherDedication"),
                "Archer Dedication, Double Shot" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("DoubleShot")),
                "Archer Dedication, Triple Shot" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("TripleShot")),
                "Bastion Dedication, trained in Athletics" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("BastionDedication"), new HaveSpecificSkillProficiency("Trained", "Athletics")),
                "Bastion Dedication" => new HaveSpecificFeat("BastionDedication"),
                "perpetual infusions" => new HaveSpecificClassFeature("PerpetualInfusions", "Alchemists"),
                "Acute Scent or precise or imprecise scent" => BooleanPrerequisite.Or(templater, 
                    new HaveSpecificFeat("AcuteScent"),
                    new HaveSpecificSense("Scent", "Precise"),
                    new HaveSpecificSense("Scent", "Imprecise")
                ),
                "superstition instinct" => new HaveSpecificInstinct("Superstition"),
                "Acute Scent, or precise or imprecise scent and low-light vision" => BooleanPrerequisite.Or(templater,
                     BooleanPrerequisite.Or(templater,
                        new HaveSpecificFeat("AcuteScent"),
                        new HaveSpecificSense("Scent", "Precise"),
                        new HaveSpecificSense("Scent", "Imprecise")),
                     new HaveSpecificSense("LowLightVision", "Precise")
                ),
                "an instinct that allows you to change your additional damage from Rage to a different damage type" => new Todo(),
                "Barreling Charge" => new HaveSpecificFeat("BarrelingCharge"),
                "Sunder Spell" => new HaveSpecificFeat("SunderSpell"),
                "fury instinct" => new HaveSpecificInstinct("Fury"),
                "warrior muse" => new HaveSpecificMuse("Warrior"),
                "enigma muse, expert in Occultism" => BooleanPrerequisite.And(templater, new HaveSpecificMuse("Enigma"), new HaveSpecificSkillProficiency("Expert", "Occultism")),
                "Blessed One Dedication" => new HaveSpecificFeat("BlessedOneDedication"),
                "Blessed One Dedication, ability to cast spells from spell slots, Mercy" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("BlessedOneDedication"), new Todo(), new HaveSpecificFeat("Mercy")),
                "warrior muse, Inspire Defense" => BooleanPrerequisite.And(templater, new HaveSpecificMuse("Warrior"), new HaveSpecificFeat("InspireDefense")),
                "Well-Versed" => new HaveSpecificFeat("WellVersed"),
                "Assured Knowledge" => new HaveSpecificFeat("AssuredKnowledge"),
                "Courageous Assault" => new HaveSpecificFeat("CourageousAssault"),
                "Courageous Advance, Courageous Assault" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("CourageousAdvance"), new HaveSpecificFeat("CourageousAssault")),
                "inspire courage" => new HaveSpecificSpell("InspireCourage"),
                "Bounty Hunter Dedication" => new HaveSpecificFeat("BountyHunterDedication"),
                "trained in Nature or Society" => BooleanPrerequisite.Or(templater, new HaveSpecificSkillProficiency("Trained", "Nature"), new HaveSpecificSkillProficiency("Trained", "Society")),
                "Cavalier Dedication" => new HaveSpecificFeat("CavalierDedication"),
                "Cavalier Dedication, expert in Nature" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("CavalierDedication"), new HaveSpecificSkillProficiency("Expert", "Nature")),
                "Impressive Mount" => new HaveSpecificFeat("ImpressiveMount"),
                "Incredible Mount" => new HaveSpecificFeat("IncredibleMount"),
                "Beastmaster Dedication" => new HaveSpecificFeat("BeastmasterDedication"),
                "Mature Beastmaster Companion" => new HaveSpecificFeat("MatureBeastmasterCompanion"),
                "Beastmaster Dedication, Call Companion" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("BeastmasterDedication"), new HaveSpecificFeat("CallCompanion")),
                "Incredible Beastmaster Companion" => new HaveSpecificFeat("IncredibleBeastasterCompanion"),
                "Mature Beastmaster Companion, you have multiple animal companions" => BooleanPrerequisite.And(templater,
                    new HaveSpecificFeat("MatureBeastmasterCompanion"),
                    new HaveSpecificAnimalCompanionAmount("GreaterThanOrEqualTo", 2)
                ),
                "tyrant cause" => new HaveSpecificCause("Tyrant"),
                "desecrator cause" => new HaveSpecificCause("Desecrator"),
                "antipaladin cause" => new HaveSpecificCause("Antipaladin"),
                "Celebrity Dedication" => new HaveSpecificFeat("CelebrityDedication"),
                "tenets of evil" => new HaveSpecificTenet("Evil"),
                "devotion spell (touch of corruption)" => new HaveSpecificSpell("TouchOfCorruption"),
                "divine ally (shield), tenets of evil" => BooleanPrerequisite.And(templater, new HaveSpecificDivineAlly("Shield"), new HaveSpecificTenet("Evil")),
                "divine ally (blade), tenets of evil" => BooleanPrerequisite.And(templater, new HaveSpecificDivineAlly("Blade"), new HaveSpecificTenet("Evil")),
                "Cruelty" => new HaveSpecificFeat("Cruelty"),
                "Youâ€™ve sworn to an oath against a specific type of creature." => new Manual("You've sworn to an oath against a specific type of creature."),
                "tenets of evil, championâ€™s reaction that grants extra damage with your Strikes" => BooleanPrerequisite.And(templater, new HaveSpecificTenet("Evil"), new Manual("Champion's reaction that grants extra damage with your Strikes") ),
                "Dandy Dedication, expert in Deception" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("DandyDedication"), new HaveSpecificSkillProficiency("Expert", "Deception")),
                "Dandy Dedication" => new HaveSpecificFeat("Dandy"),
                "Dandy Dedication, master in Deception" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("DandyDedication"), new HaveSpecificSkillProficiency("Master", "Deception")),
                "Dandy Dedication, master in Society" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("DandyDedication"), new HaveSpecificSkillProficiency("Master", "Society")),
                "Esoteric Oath" => new HaveSpecificFeat("EsotericOath"),
                "Sacrifice Armor" => new HaveSpecificFeat("SacrificeArmor"),
                "You have at least one aura from a champion feat or feature." => new Todo(),
                "divine ally (steed), tenets of evil" => BooleanPrerequisite.And(templater, new HaveSpecificDivineAlly("Steed"), new HaveSpecificTenet("Evil")),
                "evil alignment" => BooleanPrerequisite.Or(templater, 
                    new HaveSpecificAlignment("LawfulEvil"),
                    new HaveSpecificAlignment("NeutralEvil"),
                    new HaveSpecificAlignment("ChaoticEvil")
                ),
                "good alignment, healing font" => BooleanPrerequisite.And(templater,
                    BooleanPrerequisite.Or(templater,
                        new HaveSpecificAlignment("LawfulGood"),
                        new HaveSpecificAlignment("NeutralGood"),
                        new HaveSpecificAlignment("ChaoticGood")
                    ),
                    new HaveSpecificDivineFont("Heal")
                ),
                "Healing Hands" => new HaveSpecificFeat("HealingHands"),
                "divine font" => new HaveSpecificClassFeature("DivineFont", "Clerics"),
                "Domain Initiate" => new HaveSpecificFeat("DomainInitiate"),
                "Versatile Font" => new HaveSpecificFeat("VersatileFont"),
                "harmful font or healing font" => BooleanPrerequisite.Or(templater,
                    new HaveSpecificDivineFont("Heal"),
                    new HaveSpecificDivineFont("Harm")
                ),
                "Premonition of Clarity" => new HaveSpecificFeat("PremonitionOfClarity"),
                "Verdant Weapon" => new HaveSpecificFeat("VerdantWeapon"),
                "Wild Shape; Dragon Shape, Elemental Shape, Plant Shape, or Soaring Shape" => BooleanPrerequisite.And(templater,
                    new HaveSpecificFeat("WildShape"),
                    BooleanPrerequisite.Or(templater,
                        new HaveSpecificFeat("DragonShape"),
                        new HaveSpecificFeat("ElementalShape"),
                        new HaveSpecificFeat("PlantShape"),
                        new HaveSpecificFeat("SoaringShape")
                    )
                ),
                "Attack of Opportunity" => new HaveSpecificFeat("AttackOfOpportunity"),
                "bravery" => new HaveSpecificClassFeature("Bravery", "Fighters"),
                "Cut From the Air" => new HaveSpecificFeat("CutFromTheAir"),
                "improved flexibility" => new HaveSpecificClassFeature("ImprovedFlexibility", "Fighters"),
                "Dragon Disciple Dedication" => new HaveSpecificFeat("DragonDiscipleDedication"),
                "ability to cast spells from spell slots, Dragon Disciple Dedication" => BooleanPrerequisite.And(templater, new Todo(), new HaveSpecificFeat("DragonDiscipleDedication")),
                "Dragon Disciple Dedication, dragon breath sorcerer bloodline spell" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("DragonDiscipleDedication"), new HaveSpecificSpell("DragonBreath")),
                "Shape of the Dragon" => new HaveSpecificFeat("ShapeOfTheDraon"),
                "Dual-Weapon Warrior Dedication" => new HaveSpecificFeat("DualWeaponWarriorDedication"),
                "Dual-Weapon Dedication" => new HaveSpecificFeat("DualWeaponDedication"),
                "trained in light armor and simple weapons" => BooleanPrerequisite.And(templater, new HaveSpecificArmorCategorySpecificProficiency("Trained", "Unarmored"), new HaveSpecificWeaponCategorySpecificProficiency("Trained", "Simple")),
                "Duelist Dedication" => new HaveSpecificFeat("DuelistDedication"),
                "Duelist Dedication, trained in Athletics" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("DuelistDedication"), new HaveSpecificSkillProficiency("Trained", "Athletics")),
                "Familiar Master Dedication" => new HaveSpecificFeat("FamiliarMasterDedication"),
                "Familiar Master Dedication, able to cast spells" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("FamiliarMasterDedication"), new HaveAnyMagicTradition()),
                "expert in at least one type of bow" => new HaveSpecificWeaponGroupSpecificProficiency("Expert", "Bow"),
                "Eldritch Archer Dedication" => new HaveSpecificFeat("EldritchArcherDedication"),
                "Basic Eldritch Archer Spellcasting" => new HaveSpecificFeat("BasicEldritchArcherSpellcasting"),
                "Expert Eldritch Archer Spellcasting" => new HaveSpecificFeat("ExpertEldritchArcherSpellcasting"),
                "Impressive Performance" => new HaveSpecificFeat("ImpressibePerformance"),
                "Gladiator Dedication, expert in Performance" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("GladiatorDedication"), new HaveSpecificSkillProficiency("Expert", "Performance")),
                "Gladiator Dedication" => new HaveSpecificFeat("GladiatorDedication"),
                "Play to the Crowd" => new HaveSpecificFeat("PlayToTheCrowd"),
                "trained in Nature, Natural Medicine" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Trained", "Nature"), new HaveSpecificFeat("NaturalMedicine")),
                "Herbalist Dedication, expert in Nature" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("HerbalistDedication"), new HaveSpecificSkillProficiency("Expert", "Nature")),
                "Herbalist Dedication" => new HaveSpecificFeat("HerbalistDedication"),
                "Herbalist Dedication, trained in Survival" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("HerbalistDedication"), new HaveSpecificSkillProficiency("Trained", "Survival")),
                "Horizon Walker Dedication" => new HaveSpecificFeat("HorizonWalkerDedication"),
                "Horizon Walker Dedication, expert in Acrobatics and Athletics" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("HorizonWalkerDedication"), new HaveSpecificSkillProficiency("Expert", "Acrobatics"), new HaveSpecificSkillProficiency("Expert", "Athletics")),
                "Horizon Walker Dedication, master in Perception" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("HorizonWalkerDedication"), new HaveSpecificSkillProficiency("Master", "Perception")),
                "Horizon Walker Dedication, master in Survival" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("HorizonWalkerDedication"), new HaveSpecificSkillProficiency("Master", "Survival")),
                "Horizon Walker Dedication, master in Stealth" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("HorizonWalkerDedication"), new HaveSpecificSkillProficiency("Master", "Stealth")),
                "You speak at least three languages." => new HaveSpecificLanguageAmount("GreaterThanOrEqualThan", 3),
                "Linguist Dedication, expert in Society" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("LinguistDedication"), new HaveSpecificSkillProficiency("Expert", "Society")),
                "Linguist Dedication" => new HaveSpecificFeat("LinguistDedication"),
                "Linguist Dedication, expert in Deception and Society" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("LinguistDedication"), new HaveSpecificSkillProficiency("Expert", "Deception"), new HaveSpecificSkillProficiency("Expert", "Society")),
                "Linguist Dedication, master in Society" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("LinguistDedication"), new HaveSpecificSkillProficiency("Master", "Society")),
                "trained in at least one skill to Decipher Writing" => new Todo(),
                "Loremaster Dedication" => new HaveSpecificFeat("LoremasteDedication"),
                "Magical Edification" => new HaveSpecificFeat("MagicalEdification"),
                "trained in martial weapons, trained in Diplomacy or Intimidation" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificWeaponCategorySpecificProficiency("Trained", "Martial"),
                    BooleanPrerequisite.Or(templater,
                        new HaveSpecificSkillProficiency("Trained", "Diplomacy"),
                        new HaveSpecificSkillProficiency("Trained", "Intimidation")
                    )
                ),
                "Marshal Dedication, trained in Intimidation" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("MarshalDedication"), new HaveSpecificSkillProficiency("Trained", "Intimidation")),
                "Marshal Dedication, trained in Diplomacy" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("MarshalDedication"), new HaveSpecificSkillProficiency("Trained", "Diplomacy")),
                "Marshal Dedication" => new HaveSpecificFeat("MarshalDedication"),
                "Marshal Dedication, trained in Athletics" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Trained", "Athletics")),
                "Cadence Call" => new HaveSpecificFeat("CadenceCall"),
                "Weapon Improviser Dedication" => new HaveSpecificFeat("WeaponImproviserDedication"),
                "Improvised Pummel" => new HaveSpecificFeat("ImprovisedPummel"),
                "Viking Dedication" => new HaveSpecificFeat("VikingDedication"),
                "Viking Dedication, Shield Block" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("VikingDedication"), new HaveSpecificFeat("ShieldBlock")),
                "Viking Dedication, Shield Block, Reactive Shield" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("VikingDedication"), new HaveSpecificFeat("ShieldBlock"), new HaveSpecificFeat("ReactiveShield")),
                "Viking Weapon Familiarity" => new HaveSpecificFeat("VikingWeaponFamiliarity"),
                "Talisman Dabbler Dedication" => new HaveSpecificFeat("TalismanDabblerDedication"),
                "trained in Crafting, Snare Crafting" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Trained", "Crafting")),
                "Snarecrafter Dedication" => new HaveSpecificFeat("SnarecrafterDedication"),
                "expert in Crafting, Snarecrafter Dedication" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Expert", "Crafting"), new HaveSpecificFeat("SnarecrafterDedication")),
                "master in Crafting, Snarecrafter Dedication" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Master", "Crafting"), new HaveSpecificFeat("SnarecrafterDedictation")),
                "Alchemical Crafting; trained in Crafting, Deception, and Stealth" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("AlchemicalCrafting"), new HaveSpecificSkillProficiency("Trained", "Crafting"), new HaveSpecificSkillProficiency("Trained", "Deception") , new HaveSpecificSkillProficiency("Trained", "Stealth")),
                "Assassin Dedication" => new HaveSpecificFeat("AssasinDedication"),
                "Assassin Dedication, Poison Weapon" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("AssassinDedication"), new HaveSpecificFeat("PoisonWeapon")),
                "trained in Survival, Sentinel Dedication" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Trained", "Survival"), new HaveSpecificFeat("SentinelDedication")),
                "Sentinel Dedication" => new HaveSpecificFeat("SentinelDedication"),
                "expert in Crafting, Scrounger Dedication" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Expert", "Crafting"), new HaveSpecificFeat("ScroungerDedication")),
                "Scrounger Dedication" => new HaveSpecificFeat("ScroungerDedication"),
                "master in Crafting, Scrounger Dedication" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Master", "Crafting"), new HaveSpecificFeat("ScroungerDedication")),
                "Scroll Trickster Dedication" => new HaveSpecificFeat("ScrollTricksterDedication"),
                "Basic Scroll Cache" => new HaveSpecificFeat("BasicScrollCache"),
                "Expert Scroll Cache" => new HaveSpecificFeat("ExpertScrollCache"),
                "trained in Stealth and Survival" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Trained", "Stealth"), new HaveSpecificSkillProficiency("Trained", "Survival")),
                "Scout Dedication" => new HaveSpecificFeat("ScoutDedication"),
                "master in Stealth, Scout Dedication" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Master", "Stealth"), new HaveSpecificFeat("ScoutDedication")),
                "Ritualist Dedication" => new HaveSpecificFeat("RitualistDedication"),
                "Flexible Ritualist" => new HaveSpecificFeat("FlexibleRitualist"),
                "Efficient Rituals" => new HaveSpecificFeat("EfficientRitualist"),
                "Poisoner Dedication, trained in Medicine" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Trained", "Medicine")),
                "Poisoner Dedication" => new HaveSpecificFeat("PoisonerDedication"),
                "Poisoner Dedication, expert in Crafting" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("PoisonerDedication"), new HaveSpecificSkillProficiency("Expert", "Crafting")),
                "Pirate Dedication" => new HaveSpecificFeat("PirateDedication"),
                "trained in Acrobatics and Athletics, Pirate Dedication" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Trained", "Acrobatics"), new HaveSpecificSkillProficiency("Trained", "Athletics"), new HaveSpecificFeat("PirateDedication")),
                "trained in Medicine, Battle Medicine" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Trained", "Medicine"), new HaveSpecificFeat("BattleMedicine")),
                "Medic Dedication" => new HaveSpecificFeat("MedicDedication"),
                "trained in Diplomacy, Treat Condition" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Trained", "Diplomacy"), new HaveSpecificFeat("TreatCondition")),
                "Medic Dedication, legendary in Medicine" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("MedicDedication"), new HaveSpecificSkillProficiency("Legendary", "Medicine")),
                "Strength 14" => new HaveSpecificStat(14, "Strength"),
                "Mauler Dedication, trained in Athletics" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("MaulerDedication"), new HaveSpecificSkillProficiency("Trained", "Athletics")),
                "Mauler Dedication" => new HaveSpecificFeat("MaulerDedication"),
                "Mauler Dedication, expert in Athletics" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("MaulerDedication"), new HaveSpecificSkillProficiency("Expert", "Athletics")),
                "Martial Artist Dedication" => new HaveSpecificFeat("MartialArtistDedication"),
                "Martial Artist Dedication, trained in Deception" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("MartialArtistDedication"), new HaveSpecificSkillProficiency("Trained", "Deception")),
                "expert in Intimidation, Gorilla Stance" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Expert", "Intimidation"), new HaveSpecificFeat("GorillaStance")),
                "expert in Deception, Flurry of Blows, Stumbling Stance" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Expert", "Deception"), new HaveSpecificFeat("FlurryOfBlows"), new HaveSpecificFeat("StumblingStance")),
                "expert in Arcana, Nature, Occultism, or Religion; Vigilante Dedication" => BooleanPrerequisite.Or(templater, 
                    BooleanPrerequisite.Or(templater,
                        new HaveSpecificSkillProficiency("Expert", "Arcana"),
                        new HaveSpecificSkillProficiency("Expert", "Nature"),
                        new HaveSpecificSkillProficiency("Expert", "Occultism"),
                        new HaveSpecificSkillProficiency("Expert", "Religion")
                    ),
                    new HaveSpecificFeat("VigilanteDedication")
                ),
                "Vigilante Dedication" => new HaveSpecificFeat("VigilanteDedication"),
                "animal companion or familiar, expert in Deception, Vigilante Dedication" => BooleanPrerequisite.And(templater, 
                    BooleanPrerequisite.Or(templater, 
                        new HaveSpecificAnimalCompanionAmount("GreaterThanOrEqualTo", 1),
                        new HaveAnyFamiliar()
                    ), 
                    new HaveSpecificSkillProficiency("Expert", "Deception")
                ),
                "master in Deception, Vigilante Dedication" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Master", "Deception"), new HaveSpecificFeat("VigilanteDedication")),
                "expert in Intimidation, Startling Appearance" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Expert", "Intimidation"), new HaveSpecificFeat("StartlingAppearance")),
                "Startling Appearance" => new HaveSpecificFeat("StartlingAppearance"),
                "Investigator Dedication" => new HaveSpecificFeat("InvestigatorDedication"),
                "Basic Deduction" => new HaveSpecificFeat("BasicDeduction"),
                "Investigator Dedication, trained in at least one skill and expert in at least one skill" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("InvestigatorDedication"), 
                    new HaveAnySkillSpecificProficiency("Trained"),
                    new HaveAnySkillSpecificProficiency("Expert")
                ),
                "Investigator Dedication, expert in Perception" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("InvestigatorDedication"), new HaveSpecificSkillProficiency("Expert", "Perception")),
                "Oracle Dedication" => new HaveSpecificFeat("OracleDedication"),
                "Basic Mysteries" => new HaveSpecificFeat("BasicMysteries"),
                "Basic Oracle Spellcasting" => new HaveSpecificFeat("BasicOracleSpellcasting"),
                "Basic Oracle Spellcasting, master in Religion" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("BasicOracleSpellcasting"), new HaveSpecificSkillProficiency("Master", "Religion")),
                "Expert Oracle Spellcasting, legendary in Religion" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("ExpertOracleSpellcasting"), new HaveSpecificSkillProficiency("Legendary", "Religion")),
                "Charisma 14, Dexterity 14" => BooleanPrerequisite.And(templater, new HaveSpecificStat(14, "Charisma"), new HaveSpecificStat(14, "Dexterity")),
                "Swashbuckler Dedication" => new HaveSpecificFeat("SwashbucklerDedication"),
                "Basic Flair" => new HaveSpecificFeat("BasicFlair"),
                "Swashbuckler Dedication, expert in Reflex saves" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("SwashbucklerDedication"), new HaveSpecificSavingThrowSpecificProficiency("Expert", "Reflex")),
                "Witch Dedication" => new HaveSpecificFeat("WitchDedication"),
                "Basic Witchcraft" => new HaveSpecificFeat("BasicWitchcraft"),
                "Basic Witch Spellcasting" => new HaveSpecificFeat("BasicWitchSpellcasting"),
                "Basic Witch Spellcasting, master in the skill associated with your patronâ€™s tradition" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("BasicWitchSpellcasting"), new Todo()),
                "Expert Witch Spellcasting, legendary in the skill associated with your patronâ€™s tradition" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("ExpertWitchSpellcasting"), new Todo()),
                "alchemical sciences methodology" => new HaveSpecificMethodology("AlchemicalSciences"),
                "empiricism or interrogation methodology" => BooleanPrerequisite.Or(templater, new HaveSpecificMethodology("Empiricism"), new HaveSpecificMethodology("Interrogation")),
                "forensic medicine methodology" => new HaveSpecificMethodology("ForensicMedicine"),
                "strategic strike" => new HaveSpecificClassFeature("StrategicStrike", "Investigators"),
                "Shared Stratagem" => new HaveSpecificFeat("SharedStratagem"),
                "Predictive Purchase" => new HaveSpecificFeat("PredictivePurchase"),
                "Clue Them All In" => new HaveSpecificFeat("ClueThemAllIn"),
                "Thorough Research" => new HaveSpecificFeat("ThoroughResearch"),
                "Monastic Weaponry, a feat granting access to all weapons with an ancestry trait" => BooleanPrerequisite.And(templater,
                    new HaveSpecificFeat("MonasticWeaponry"),
                    new Manual("A feat granting access to all weapons with an ancestry trait.")
                ),
                "Monastic Weaponry" => new HaveSpecificFeat("MonasticWeaponry"),
                "Deflect Arrow, Monastic Archer Stance" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("DeflectArrow"), new HaveSpecificFeat("MonasticArcherStance")),
                "expert in Deception, Stumbling Stance" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Expert", "Deception"), new HaveSpecificFeat("StumblingStance")),
                "Cobra Stance, expert in unarmed attacks" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("CobraStance"), new HaveSpecificWeaponCategorySpecificProficiency("Expert", "Unarmed")),
                "Peafowl Stance" => new HaveSpecificFeat("PeafowlStance"),
                "at least one stance feat" => new Manual("At least one stance feat."),
                "Monastic Archer Stance" => new HaveSpecificFeat("MonasticArcherStance"),
                "expert strikes" => new HaveSpecificClassFeature("ExpertStrikes", "Monks"),
                "One-Inch Punch" => new HaveSpecificFeat("OneInchPunch"),
                "ki spells, Master of Many Styles" => BooleanPrerequisite.And(templater, new HaveAnyKiSpells(), new HaveSpecificFeat("MasterOfManyStyles")),
                "Monastic Archer Stance, Stunning Fist" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("MonasticArcherStance"), new HaveSpecificFeat("StunningFist")),
                "warden spells" => new HaveSpecificClass("Ranger"),
                "Impossible Flurry" => new HaveSpecificFeat("ImpossibleFlurry"),
                "Ubiquitous Snares" => new HaveSpecificFeat("UbiquitousSnares"),
                "Pickpocket" => new HaveSpecificFeat("Pickpocket"),
                "mastermind racket" => new HaveSpecificRacket("Mastermind"),
                "Twin Feint" => new HaveSpecificFeat("TwinFeint"),
                "sneak attack 2d6" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificClass("Rogue"),
                    new HaveSpecificLevel("GreaterThanOrEqualTo", 5) 
                ),
                "eldritch trickster racket, Debilitating Strike" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificRacket("EldritchTrickster"),
                    new HaveSpecificFeat("DebilitatingStrike")
                ),
                "mastermind racket, Debilitating Strike" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificRacket("Mastermind"),
                    new HaveSpecificFeat("DebilitatingStrike")
                ),
                "trained in Medicine, Debilitating Strike" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Trained", "Medicine"), new HaveSpecificFeat("DebilitatingStrike")),
                "Ricochet Stance" => new HaveSpecificFeat("RicochetStance"),
                "a bloodline that corresponds with a creature trait" => new Manual("A bloodline that corresponds with a creature trait."),
                "Ancestral Blood Magic" => new HaveSpecificFeat("AncestralBloodMagic"),
                "Arcane Evolution or Primal Evolution" => BooleanPrerequisite.Or(templater,
                    new HaveSpecificFeat("ArcaneEvolution"),
                    new HaveSpecificFeat("PrimalEvolution")
                ),
                "Divine Evolution or Occult Evolution" => BooleanPrerequisite.Or(templater,
                    new HaveSpecificFeat("DivineEvolution"),
                    new HaveSpecificFeat("OccultEvolution")
                ),
                "a bloodline based on a specific type of creature" => new Manual("A bloodline that corresponds with a creature trait."),
                "Godless Healing, you follow the Laws of Mortality" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("GodlessHealing"), new FollowSpecificPhilosophy("LawsOfMortality")),
                "expert in Society; Connections or Criminal Connections" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificSkillProficiency("Expert", "Society"), 
                    BooleanPrerequisite.Or(templater,
                        new HaveSpecificFeat("Connections"),
                        new HaveSpecificFeat("CriminalConnections")
                    )    
                ),
                "an animal companion, warden spells" => BooleanPrerequisite.And(templater, new HaveSpecificAnimalCompanionAmount("GreaterThanOrEqualTo", 1), new HaveSpecificClass("Ranger")),
                "Snare Crafting, warden spells" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("SnareCrafting"), new HaveSpecificClass("Ranger")),
                "expert in Survival, warden spells" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Expert", "Survival"), new HaveSpecificClass("Ranger")),
                "Wardenâ€™s Focus" => new HaveSpecificFeat("WardensFocus"),
                "bloodline that grants divine or occult spells" => new Manual("Bloodline that grants divine or occult spells."),
                "Premonition of Avoidance" => new HaveSpecificFeat("PremonitionOfAvoidance"),
                "Legendary Thief, Loaner Spell" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("LegendaryThief"), new HaveSpecificFeat("LoanerSpell")),
                "master in Stealth, expert in Performance" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Master", "Stealth"), new HaveSpecificSkillProficiency("Expert", "Performance")),
                "Shadow Magic" => new HaveSpecificFeat("ShadowMagic"),
                "Shadowdancer Dedication" => new HaveSpecificFeat("ShadowdancerDedication"),
                "devotion spells, tenets of evil" => BooleanPrerequisite.And(templater, new HaveSpecificClass("Champion"), new HaveSpecificTenet("Evil")),
                "darkvision" => new HaveSpecificSense("Darkvision", "Precise"),
                "Stonewalker" => new HaveSpecificFeat("Stonewalker"),
                "at least 100 years old" => new HaveSpecificAge("GreaterThanOrEqualTo", 100),
                "at least one innate spell gained from an elf ancestry feat" => new Manual("At least one innate spell gained from an elf ancestry feat."),
                "at least one arcane or occult innate spell gained from a gnome heritage or gnome ancestry feat" => new Manual("at least one arcane or occult innate spell gained from a gnome heritage or gnome ancestry feat"),
                "unbreakable goblin heritage" => new HaveSpecificHeritage("UnbreakableGoblin"),
                "Goblin Song" => new HaveSpecificFeat("GoblinSong"),
                "Step Lively" => new HaveSpecificFeat("StepLively"),
                "Dance Underfoot" => new HaveSpecificFeat("DanceUnderfoot"),
                "master in Diplomacy, Hobnobber" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Master", "Diplomacy"), new HaveSpecificFeat("Hobnobber")),
                "Tian-Dan ethnicity" => new Manual("Tian-Dan Ethnicity"),
                "Nidalese ethnicity" => new Manual("Nidalese Ethnicity"),
                "Gloomseer" => new HaveSpecificFeat("Gloomseer"),
                "Dragon Spit" => new HaveSpecificFeat("DragonSpit"),
                "spellcasting class feature" => new HaveAnyMagicTradition(),
                "Adapted Cantrip, can cast 3rd-level spells" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("AdapterCantrip"), new HaveSpecificSpellSlotLevel(3)),
                "Cooperative Nature" => new HaveSpecificFeat("CooperativeNature"),
                "Clever Improviser" => new HaveSpecificFeat("CleverImproviser"),
                "Unconventional Weaponry, trained in the weapon you chose for Unconventional Weaponry" => BooleanPrerequisite.And(templater,
                    new HaveSpecificFeat("UnconventionalWeaponry"),
                    new Manual("Trained in the weapon you chose for Unconventional Weaponry.")
                ),
                "trained in clan daggers" => new HaveSpecificMeleeWeaponSpecificProficiency("Trained", "ClanDagger"),
                "Clanâ€™s Edge" => new HaveSpecificFeat("ClansEdge"),
                "death warden dwarf heritage" => new HaveSpecificHeritage("DeathWardenDwarf"),
                "elemental heart dwarf heritage" => new HaveSpecificHeritage("ElementalHeartDwarf"),
                "ancient-blooded dwarf heritage" => new HaveSpecificHeritage("AncientBloodedDwarf"),
                "Rock Runner" => new HaveSpecificFeat("RockGunner"),
                "Dwarven Weapon Familiarity" => new HaveSpecificFeat("DwarvenWeaponFamiliarity"),
                "arctic elf, cavern elf, desert elf, woodland elf, or any other elf heritage based on adapting to an environment" => BooleanPrerequisite.Or(templater,
                    new HaveSpecificHeritage("ArcticElf"),
                    new HaveSpecificHeritage("CavernElf"),
                    new HaveSpecificHeritage("DesertElf"),
                    new HaveSpecificHeritage("WoodlandElf"),
                    new Manual("Any other elf heritage based on adapting to an environment.")
                ),
                "Elven Weapon Familiarity" => new HaveSpecificFeat("ElvenWeaponFamiliarity"),
                "Ancestral Longevity" => new HaveSpecificFeat("AncestralLongevity"),
                "Expert Longevity" => new HaveSpecificFeat("ExpertLongevity"),
                "umbral gnome heritage" => new HaveSpecificHeritage("UmbralGnome"),
                "chameleon gnome heritage" => new HaveSpecificHeritage("ChameleonGnome"),
                "Gnome Obsession" => new HaveSpecificFeat("GnomeObsession"),
                "Illusion Sense" => new HaveSpecificFeat("IllusionSense"),
                "Unexpected Shift" => new HaveSpecificFeat("UnexpectedShift"),
                "Burrow Elocutionist" => new HaveSpecificFeat("BurrowElocutionist"),
                "focus pool, at least one innate spell from a gnome heritage or ancestry feat that shares a tradition with at least one of your focus spells" => BooleanPrerequisite.And(templater,
                    new HaveFocusPool(),
                    new Manual("At least one innate spell from a gonome heritage or ancestry feat that shares a tradition with at least one of your focus spells.")
                ),
                "Gnome Weapon Familiarity" => new HaveSpecificFeat("GnomeWeaponFamiliarity"),
                "at least one primal innate spell" => new Todo(),
                "irongut goblin or razortooth goblin heritage" => BooleanPrerequisite.Or(templater, new HaveSpecificHeritage("IrongutGoblin"), new HaveSpecificHeritage("RazortoothGoblin")),
                "tailed goblin heritage" => new HaveSpecificHeritage("TailedGoblin"),
                "Fang Sharpener or razortooth goblin heritage" => BooleanPrerequisite.Or(templater, new HaveSpecificHeritage("FangSharpenerGoblin"), new HaveSpecificHeritage("RazortoothGoblin")),
                "worshipper of Lamashtu" => new WorshipSpecificDeity("Lamashtu"),
                "tailed goblin heritage, Hard Tail" => BooleanPrerequisite.And(templater, new HaveSpecificHeritage("TailedGoblin"), new HaveSpecificFeat("HardTail")),
                "charhide goblin heritage" => new HaveSpecificHeritage("CharchideGoblin"),
                "tailed goblin or treedweller goblin heritage" => BooleanPrerequisite.Or(templater,
                    new HaveSpecificHeritage("TailedGoblin"),
                    new HaveSpecificHeritage("TreedwellerGoblin")
                ),
                "snow goblin heritage" => new HaveSpecificHeritage("SnowGoblin"),
                "Fang Sharpener" => new HaveSpecificFeat("FangSharpener"),
                "unbreakable goblin heritage, Bouncy Goblin" => BooleanPrerequisite.And(templater, new HaveSpecificHeritage("UnbreakableGoblin"), new HaveSpecificFeat("BoundyGoblin")),
                "Torch Goblin" => new HaveSpecificFeat("TorchGoblin"),
                "Goblin Weapon Familiarity" => new HaveSpecificFeat("GoblinWeaponFamiliarity"),
                "Goblin Scuttle" => new HaveSpecificFeat("GoblinScuttle"),
                "Very Sneaky" => new HaveSpecificFeat("VerySneaky"),
                "Easily Dismissed" => new HaveSpecificFeat("EasilyDismissed"),
                "Halfling Luck" => new HaveSpecificFeat("HalflingLuck"),
                "Halfling Weapon Familiarity" => new HaveSpecificFeat("HalflingWeaponFamiliarity"),
                "Distracting Shadows" => new HaveSpecificFeat("DistractingShadows"),
                "Halfling, Weapon Familiarity" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificAncestry("Halfling"),
                    new HaveSpecificFeat("WeaponFamiliarity")
                ),
                "master in Crafting, deity who grants heal divine font" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Master", "Crafting"), new HaveAnyDeitySpecificFont("Heal")),
                "master in Crafting, deity who grants harm divine font" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Master", "Crafting"), new HaveAnyDeitySpecificFont("Harm")),
                "master in Diplomacy, you follow a deity or philosophy" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificSkillProficiency("Master", "Diplomacy"), 
                    BooleanPrerequisite.Or(templater, 
                        new FollowAnyReligion(),
                        new FollowAnyPhilosophy()
                    )
                ),
                "Battle Medicine, canâ€™t have a patron deity" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("BattleMedicine"), new Manual("Can't have a patron deity."), new Todo()),
                "master in Religion, you follow a deity" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Master", "Religion"),
                    new HaveSpecificSkillProficiency("Master", "Religion"),
                    new FollowAnyReligion()
                ),
                "master in Religion, good or evil deity" => BooleanPrerequisite.And(templater,
                    new HaveSpecificSkillProficiency("Master", "Religion"),
                    BooleanPrerequisite.Or(templater, 
                            new HaveAnyDeitySpecificAlignment("NeutralGood"),
                            new HaveAnyDeitySpecificAlignment("LawfulGood"),
                            new HaveAnyDeitySpecificAlignment("ChaoticGood"),
                            new HaveAnyDeitySpecificAlignment("LawfulEvil"),
                            new HaveAnyDeitySpecificAlignment("ChaoticEvil"),
                            new HaveAnyDeitySpecificAlignment("NeutralEvil")
                    )
                ),
                "master in Survival; deity who grants the cold, fire, nature, or travel domain" => BooleanPrerequisite.And(templater,
                    new HaveSpecificSkillProficiency("Master", "Survival"),
                    BooleanPrerequisite.Or(templater, 
                        new HaveAnyDeitySpecificDomain("Cold"),
                        new HaveAnyDeitySpecificDomain("Fire"),
                        new HaveAnyDeitySpecificDomain("Nature"),
                        new HaveAnyDeitySpecificDomain("Travel")
                    )
                ),
                "Diehard, you have died at least once" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("Diehard"), new Manual("You have died at least once.")),
                "you follow a deity" => new FollowAnyReligion(),
                "harmful font" => new HaveSpecificDivineFont("Harm"),
                "good alignment" => BooleanPrerequisite.Or(templater,
                        new HaveSpecificAlignment("LawfulGood"),
                        new HaveSpecificAlignment("ChaoticGood"),
                        new HaveSpecificAlignment("NeutralGood")
                ),
                "healing font" => new HaveSpecificDivineFont("Heal"),
                "harmful font or healing font, deity that allows clerics to have both fonts" => BooleanPrerequisite.And(templater, 
                    BooleanPrerequisite.Or(templater,
                        new HaveSpecificDivineFont("Harm"),
                        new HaveSpecificDivineFont("Heal")
                    ),
                    new HaveAnyDeitySpecificFont("Harm"),
                    new HaveAnyDeitySpecificFont("Heal")
                ),
                "harmful font, evil alignment" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificDivineFont("Harm"), 
                    BooleanPrerequisite.Or(templater,
                        new HaveSpecificAlignment("LawfulEvil"),
                        new HaveSpecificAlignment("ChaoticEvil"),
                        new HaveSpecificAlignment("NeutralEvil")
                    )
                ),
                "Communal Healing" => new HaveSpecificFeat("CommunalHealing"),
                "chaotic, evil, good, or lawful deity" => null,
                "Holy Castigation" => new HaveSpecificFeat("HolyCastigation"),
                "healing font, good alignment" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificDivineFont("Heal"), 
                    BooleanPrerequisite.Or(templater,
                        new HaveSpecificAlignment("LawfulGood"),
                        new HaveSpecificAlignment("ChaoticGood"),
                        new HaveSpecificAlignment("NeutralGood")
                    )
                ),
                "harmful font, Command Undead, evil alignment" => BooleanPrerequisite.And(templater,
                    new HaveSpecificDivineFont("Harm"),
                    new HaveSpecificFeat("CommandUndead"),
                    BooleanPrerequisite.Or(templater,
                        new HaveSpecificAlignment("LawfulEvil"),
                        new HaveSpecificAlignment("ChaoticEvil"),
                        new HaveSpecificAlignment("NeutralEvil")
                    )
                ),
                "expert in your deityâ€™s favored weapon" => new HaveFavoredWeaponSpecificProficiency("Expert"),
                "one or more domain spells" => new HaveSpecificFeat("DomainInitiate"),
                "Replenishment of War" => new HaveSpecificFeat("ReplenishmentOfWar"),
                "Advanced Domain" => new HaveSpecificFeat("AdvancedDomain"),
                "Align Armament" => new HaveSpecificFeat("AlignArmament"),
                "Domain Focus" => new HaveSpecificFeat("DomainFocus"),
                "Swift Banishment" => new HaveSpecificFeat("SwiftBanishment"),
                "miraculous spell" => new HaveSpecificClassFeature("MiraculousSpell", "Clerics"),
                "Ki Strike, you follow a deity" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("KiStrike"), new FollowAnyReligion()),
                "bloodline that grants divine spells, you follow a deity" => BooleanPrerequisite.And(templater, new HaveAnyBloodlineSpecificMagicTradition("Divine"), new FollowAnyReligion()),
                "Animal Trainer Dedication" => new HaveSpecificFeat("AnimalTrainerDedication"),
                "master in Nature, Animal Trainer Dedication" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Master", "Nature"), new HaveSpecificFeat("AnimalTrainedDedication")),
                "Mature Trained Companion" => new HaveSpecificFeat("MatureTrainedCompanion"),
                "Splendid Companion" => new HaveSpecificFeat("SplendidCompanion"),
                "expert in Arcana and Crafting, or an ally with expert proficiency in those skills willing to augment you" => BooleanPrerequisite.Or(templater, 
                    BooleanPrerequisite.And(templater,
                        new HaveSpecificSkillProficiency("Expert", "Arcana"),
                        new HaveSpecificSkillProficiency("Expert", "Crafting")),
                    new Todo()
                ),
                "Golem Grafter Dedication, expert in unarmed attacks" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("GolemGrafterDedication"), new HaveSpecificWeaponCategorySpecificProficiency("Expert", "Unarmed")),
                "Golem Grafter Dedication" => new HaveSpecificFeat("GolemGrafterDedication"),
                "Juggler Dedication" => new HaveSpecificFeat("JugglerDedication"),
                "expert in Performance, Juggler Dedication" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Expert", "Performance"), new HaveSpecificFeat("JugglerDedication")),
                "expert in Acrobatics, Juggler Dedication" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Expert", "Acrobatics"), new HaveSpecificFeat("JugglerDedication")),
                "master in Performance, Juggler Dedication" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Master", "Performance"), new HaveSpecificFeat("JugglerDedication")),
                "legendary in Performance, Juggler Dedication" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Legendary", "Performance"), new HaveSpecificFeat("JugglerDedication")),
                "Dexterity 16; trained in Acrobatics and Athletics; trained in a weapon in the spear or polearm group (referred to in this archetype as â€œyour staffâ€)" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificStat(16, "Dexterity"),
                    new HaveSpecificSkillProficiency("Trained", "Acrobatics"),
                    new HaveSpecificSkillProficiency("Trained", "Athletics"),
                    BooleanPrerequisite.Or(templater, 
                        new HaveSpecificWeaponGroupSpecificProficiency("Trained", "Spear"),
                        new HaveSpecificWeaponGroupSpecificProficiency("Trained", "Polearm")
                    )
                ),
                "Staff Acrobat Dedication" => new HaveSpecificFeat("StaffAcrobatDedication"),
                "Staff Acrobat Dedication, expert proficiency in your staff" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("StaffAcrobatDedication"),
                    BooleanPrerequisite.Or(templater,
                        new HaveSpecificWeaponGroupSpecificProficiency("Expert", "Spear"),
                        new HaveSpecificWeaponGroupSpecificProficiency("Expert", "Polearm"),
                        new Todo()
                    )
                ),
                "Turpin Rowe Lumberjack Dedication" => new HaveSpecificFeat("TurpinRoweLumberjackDedication"),
                "Dueling Riposte, Mirror Shield, or Twin Riposte" => BooleanPrerequisite.Or(templater, 
                    new HaveSpecificFeat("DuelingRiposte"),
                    new HaveSpecificFeat("MirrorShiled"),
                    new HaveSpecificFeat("TwinRiposte")
                ),
                "Wholeness of Body" => new HaveSpecificFeat("WholenessOfBody"),
                "legendary in Thievery or master in Arcana, Nature, Occult, or Religion" => BooleanPrerequisite.Or(templater, 
                    new HaveSpecificSkillProficiency("Legendary", "Thievery"), 
                        BooleanPrerequisite.Or(templater, 
                        new HaveSpecificSkillProficiency("Master", "Arcana"),
                        new HaveSpecificSkillProficiency("Master", "Nature"),
                        new HaveSpecificSkillProficiency("Master", "Occult"),
                        new HaveSpecificSkillProficiency("Master", "Religion"))),
                "Reprepare Spell" => new HaveSpecificFeat("ReprepareSpell"),
                "trained in Zevgavizeb Lore" => new HaveSpecificLoreSpecificProficiency("Trained", "Zevgavizeb"),
                "Dexterity 16, trained in Performance" => BooleanPrerequisite.And(templater, new HaveSpecificStat(16, "Dexterity"), new HaveSpecificSkillProficiency("Trained", "Performance")),
                "Charisma 14, second mark member of the Firebrands" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificStat(14, "Charisma"), 
                    new Manual("Second mark member of the Firebrands")
                ),
                "expert in Deception, Diplomacy, or Intimidation; Firebrand Braggart Dedication" => BooleanPrerequisite.And(templater, 
                    BooleanPrerequisite.Or(templater,
                        new HaveSpecificSkillProficiency("Expert", "Deception"),
                        new HaveSpecificSkillProficiency("Expert", "Diplomacy"),
                        new HaveSpecificSkillProficiency("Expert", "Intimidation")),
                    new HaveSpecificFeat("FirebrandBraggartDedication")
                    ),
                "trained in Acrobatics or Athletics, Firebrand Braggart Dedication" => BooleanPrerequisite.And(templater, 
                    BooleanPrerequisite.Or(templater,
                        new HaveSpecificSkillProficiency("Trained", "Acrobatics"),
                        new HaveSpecificSkillProficiency("Trained", "Athletics")),
                    new HaveSpecificFeat("FirebrandBraggartDedication")
                ),
                "expert in Deception, Firebrand Braggart Dedication" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Expert", "Perception"), new HaveSpecificFeat("FirebrandBraggartDedication")),
                "Charisma 16, Firebrand Braggart Dedication" => BooleanPrerequisite.And(templater, new HaveSpecificStat(16, "Charisma"), new HaveSpecificFeat("FirebrandBraggartDedication")),
                "Boasterâ€™s Challenge" => new HaveSpecificFeat("BoastersChallenge"),
                "Daring Act" => new HaveSpecificFeat("DaringAct"),
                "Hellknight Armiger Dedication, lawful alignment, member of a Hellknight order, passed the Hellknight Test" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("HellknightArmigerDedication"),
                    BooleanPrerequisite.Or(templater, 
                        new HaveSpecificAlignment("LawfulGood"),
                        new HaveSpecificAlignment("LawfulEvil")
                    ),
                    new Manual("Member of a Hellknight order."),
                    new Manual("Passed the Hellknight Test.")
                ),
                "Hellknight Dedication" => new HaveSpecificFeat("HellknightDedication"),
                "spellcasting class feature, Hellknight Armiger Dedication, lawful alignment, member of a Hellknight order, passed the Hellknight Test" => BooleanPrerequisite.And(templater, 
                    new HaveAnyMagicTradition(),
                    new HaveSpecificFeat("HellknightArmigerDedication"),
                    BooleanPrerequisite.Or(templater,
                        new HaveSpecificAlignment("LawfulGood"),
                        new HaveSpecificAlignment("LawfulEvil")
                    ),
                    new Manual("Member of a Hellknight order."),
                    new Manual("Passed the Hellknight Test.")
                ),
                "Hellknight Signifer Dedication" => new HaveSpecificFeat("HellknightSigniferDedication"),
                "Hellknight Signifer Dedication, ability to cast focus spells" => BooleanPrerequisite.And(templater,
                    new HaveSpecificFeat("HellknightSigniferDedication"),
                    new HaveFocusPool()
                ),
                "trained in Survival and Stealth, any non-evil alignment, member of the Knights of Lastwall of knight rank" => BooleanPrerequisite.And(templater,
                    new HaveSpecificSkillProficiency("Trained", "Survival"), 
                    new HaveSpecificSkillProficiency("Trained", "Stealth"),
                    BooleanPrerequisite.Or(templater,
                        new HaveSpecificAlignment("TrueNeutral"),
                        new HaveSpecificAlignment("LawfulNeutral"),
                        new HaveSpecificAlignment("NeutralGood"),
                        new HaveSpecificAlignment("ChaoticGood"),
                        new HaveSpecificAlignment("LawfulGood"),
                        new HaveSpecificAlignment("ChaoticNeutral")
                    )
                ),
                "Knight Reclaimant Dedication" => new HaveSpecificFeat("KnightReclaimantDedication"),
                "Knight Reclaimant Dedication, master proficiency in a weapon" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("KnightReclaimantDedication"), 
                    BooleanPrerequisite.Or(templater,
                        new HaveAnyWeaponCategorySpecificProficiency("Master"),
                        new HaveAnyWeaponGroupSpecificProficiency("Master"),
                        new HaveAnyMeleeWeaponSpecificProficiency("Master"),
                        new HaveAnyRangedWeaponSpecificProficiency("Master")
                    )
                ),
                "trained in Religion, any good alignment, member of the Knights of Lastwall of knight rank" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificSkillProficiency("Trained", "Perception"),
                    BooleanPrerequisite.Or(templater,
                        new HaveSpecificAlignment("LawfulGood"),
                        new HaveSpecificAlignment("ChaoticGood"),
                        new HaveSpecificAlignment("NeutralGood")
                    ),
                    new Manual("Member of the Knights of Lastwall of knight rank.")
                ),
                "Knight Vigilant Dedication, expert in Will saves" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("KnightVigilantDedication"), 
                    new HaveSpecificSavingThrowSpecificProficiency("Expert", "Will")
                ),
                "Knight Vigilant Dedication, expert in medium or heavy armor" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("KnightVigilantDedication"),
                    BooleanPrerequisite.Or(templater,
                        new HaveSpecificArmorCategorySpecificProficiency("Expert", "Medium"),
                        new HaveSpecificArmorCategorySpecificProficiency("Expert", "Heavy")
                    )
                ),
                "Knight Vigilant Dedication, Shield Block, master in Religion" => BooleanPrerequisite.And(templater,
                    new HaveSpecificFeat("KnightVigilantDedication"),
                    new HaveSpecificFeat("ShieldBlock"),
                    new HaveSpecificSkillProficiency("Master", "Religion")
                ),
                "Knight Vigilant Dedication; expert in light armor, medium armor, or unarmored defense; trained in heavy armor" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("KnightVigilantDedication"),
                    BooleanPrerequisite.Or(templater,
                        new HaveSpecificArmorCategorySpecificProficiency("Expert", "Light"),
                        new HaveSpecificArmorCategorySpecificProficiency("Expert", "Medium"),
                        new HaveSpecificArmorCategorySpecificProficiency("Expert", "Unarmored")
                    ),
                    new HaveSpecificArmorCategorySpecificProficiency("Trained", "Heavy")
                ),
                "Magaambyan Attendant Dedication, member of the Magaambya of conversant rank" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("MagaambyanAttendantDedication"),
                    new Manual("Member of the Magaambya of conversant rank.")
                ),
                "Halcyon Speaker Dedication" => new HaveSpecificFeat("HalcyonSpeakerDedication"),
                "Dualistic Synergy" => new HaveSpecificFeat("DualisticSynergy"),
                "Persistent Creation" => new HaveSpecificFeat("PersistentCreation"),
                "Halcyon Spellcasting Initiate" => new HaveSpecificFeat("HalcyonSpellcastingInitiate"),
                "Halcyon Spellcasting Initiate; master in either Arcana or Nature, expert in the other" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("HalcyonSpellcastingInitiate"),
                    BooleanPrerequisite.Or(templater,
                        BooleanPrerequisite.And(templater,
                            new HaveSpecificSkillProficiency("Master", "Arcana"),
                            new HaveSpecificSkillProficiency("Expert", "Nature")
                        ),
                        BooleanPrerequisite.And(templater,
                            new HaveSpecificSkillProficiency("Expert", "Arcana"),
                            new HaveSpecificSkillProficiency("Master", "Nature")
                        )
                    )
                ),
                "Halcyon Spellcasting Adept; legendary in either Arcana or Nature, master in the other" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("HalcyonSpellcastingAdept"),
                    BooleanPrerequisite.Or(templater,
                        BooleanPrerequisite.And(templater,
                            new HaveSpecificSkillProficiency("Legendary", "Arcana"),
                            new HaveSpecificSkillProficiency("Master", "Nature")
                        ),
                        BooleanPrerequisite.And(templater,
                            new HaveSpecificSkillProficiency("Master", "Arcana"),
                            new HaveSpecificSkillProficiency("Legendary", "Nature")
                        )
                    )
                ),
                "Halcyon Spellcasting Initiate, Fulminating Synergy, legendary in Arcana and Nature" => BooleanPrerequisite.And(templater,
                    new HaveSpecificFeat("HalcyonSpellcastingInitiate"),
                    new HaveSpecificFeat("FulminatingSynergy"),
                    new HaveSpecificSkillProficiency("Master", "Arcana"),
                    new HaveSpecificSkillProficiency("Master", "Nature")),
                "trained in Arcana or Nature; member of the Magaambya of attendant rank" => BooleanPrerequisite.And(templater, 
                    BooleanPrerequisite.Or(templater,
                        new HaveSpecificSkillProficiency("Trained", "Arcana"),
                        new HaveSpecificSkillProficiency("Trained", "Nature")),
                    new Manual("Member of the Magaambya of attendant rank.")
                ),
                "Mask Familiar" => new HaveSpecificFeat("MaskFamiliar"),
                "Magaambyan Attendant Dedication, Cascade Bearers affiliation" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("MagaambyanAttendantDedication"), new Manual("Cascade Bearers affiliation.")),
                "Magaambyan Attendant Dedication" => new HaveSpecificFeat("MagaambyanAttendantDedication"),
                "Magaambyan Attendant Dedication, Emerald Boughs affiliation, expert in Society" => BooleanPrerequisite.And(templater,
                     new HaveSpecificFeat("MagaambyanAttendantDedication"),
                     new Manual("Emerald Boughs affiliation."), 
                     new HaveSpecificSkillProficiency("Expert", "Society")
                ),
                "Magaambyan Attendant Dedication, Rain-Scribes affiliation" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("MagaambyanAttendantDedication"),
                    new Manual("Rain-Scribes affiliation")
                ),
                "Magaambyan Attendant Dedication, Tempest-Sun Mages affiliation" => BooleanPrerequisite.And(templater,
                    new HaveSpecificFeat("MagaambyanAttendantDedication"),
                    new Manual("Tempest-Sun Mages affiliation")
                ),
                "Magaambyan Attendant Dedication, Uzunjati affiliation, master in a Recall Knowledge skill" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("MagaambyanAttendantDedication"),
                    new Manual("Uzunjati affiliation"),
                    new HaveSpecificRecallKnowledgeProficiency("Master", false)
                ),
                "Magaambyan Attendant Dedication, Emerald Boughs affiliation" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("MagaambyanAttendantDedication"),
                    new Manual("Emerald Boughs affiliation")
                ),
                "Tempest-Sun Redirection" => new HaveSpecificFeat("TempestSunRedirection"),
                "Uzunjati Storytelling, master in a Recall Knowledge skill" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("UzunjatiStorytelling"),
                    new HaveSpecificRecallKnowledgeProficiency("Master", false)
                ),
                "member of the Pathfinder Society" => new Manual("Member of the Pathfinder Society"),
                "Pathfinder Agent Dedication" => new HaveSpecificFeat("PathfinderAgentDedication"),
                "master in a Recall Knowledge skill, Pathfinder Agent Dedication" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificRecallKnowledgeProficiency("Master", false),
                    new HaveSpecificFeat("PathfinderAgentDedication")
                ),
                "expert in Athletics, Pathfinder Agent Dedication" => BooleanPrerequisite.And(templater,
                    new HaveSpecificSkillProficiency("Expert", "Athletics"),
                    new HaveSpecificFeat("PathfinderAgentDedication")
                ),
                "expert in any Lore skill, member of the Pathfinder Society affiliated with the School of Scrolls" => BooleanPrerequisite.And(templater, 
                    new HaveAnyLoreProficiency("Expert"), 
                    new Manual("Member of the Pathfinder Society affiliated with the School of Scrolls.")
                ),
                "Scrollmaster Dedication" => new HaveSpecificFeat("ScrollmasterDedication"),
                "master in a Decipher Writing skill, Scrollmaster Dedication" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificDecipherWritingProficiency("Master"),
                    new HaveSpecificFeat("ScrollmasterDedication")
                ),
                "Intelligence, Wisdom, or Charisma 14; ability to cast focus spells; member of the Pathfinder Society affiliated with the School of Spells" => BooleanPrerequisite.And(templater, 
                    BooleanPrerequisite.Or(templater, 
                        new HaveSpecificStat(14, "Intelligence"), 
                        new HaveSpecificStat(14, "Wisdom"), 
                        new HaveSpecificStat(14, "Charisma")),
                    new HaveFocusPool(),
                    new Manual("Member of the Pathfinder Society affiliated with the School of Spells.")
                ),
                "Spellmaster Dedication" => new HaveSpecificFeat("SpellmasterDedication"),
                "Spellmaster Dedication, Steady Spellcasting" => BooleanPrerequisite.And(templater,
                    new HaveSpecificFeat("SpellmasterDedication"),
                    new HaveSpecificFeat("SteadySpellcasting")
                ),
                "Spellmaster Dedication, spell repertoire or ability to prepare spells" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("SpellmasterDedication"),
                    new HaveAnyMagicTradition()
                ),
                "Strength, Dexterity, or Constitution 14; member of the Pathfinder Society affiliated with the School of Swords" => BooleanPrerequisite.And(templater, 
                    BooleanPrerequisite.Or(templater, 
                        new HaveSpecificStat(14, "Strength"), 
                        new HaveSpecificStat(14, "Dexterity"), 
                        new HaveSpecificStat(14, "Constitution")), 
                    new Manual("Member of the Pathfinder Society affiliated with the School of Swords.")
                ),
                "Swordmaster Dedication" => new HaveSpecificFeat("SwordmasterDedication"),
                "Everstand Stance" => new HaveSpecificFeat("EverstandStance"),
                "trained in Aldori dueling swords" => new HaveSpecificMeleeWeaponSpecificProficiency("Trained", "AldoriDuelingSword"),
                "Aldori Duelist Dedication" => new HaveSpecificFeat("AldoriDuelistDedication"),
                "Aldori Parry" => new HaveSpecificFeat("AldoriParry"),
                "member of a Hellknight order, trained in heavy armor as well as your orderâ€™s favored weapon" => BooleanPrerequisite.And(templater, 
                    new Manual("Member of a Hellknight order."),
                    new HaveSpecificArmorCategorySpecificProficiency("Trained", "Heavy"),
                    new HaveFavoredWeaponSpecificProficiency("Trained")
                ),
                "Hellknight Armiger Dedication" => new HaveSpecificFeat("HellknightArmigerDedication"),
                "expert in heavy armor, Hellknight Armiger Dedication" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificArmorCategorySpecificProficiency("Export", "Heavy"),
                    new HaveSpecificFeat("HellknightArmigerDedication")
                ),
                "member of the Knights of Lastwall, Shield Block" => BooleanPrerequisite.And(templater, 
                    new Manual("Member of the Knights of Lastwall."),
                    new HaveSpecificFeat("ShieldBlock")
                ),
                "Lastwall Sentry Dedication, expert in Perception" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("LastwallSentryDedication"), new HaveSpecificSkillProficiency("Expert", "Perception")),
                "Lastwall Sentry Dedication" => new HaveSpecificFeat("LastwallSentryDedication"),
                "Necromantic Resistance" => new HaveSpecificFeat("NecromanticResistance"),
                "member of the Lion Blades, trained in Performance" => BooleanPrerequisite.And(templater,
                    new Manual("Member of the Lion Blades"),
                    new HaveSpecificSkillProficiency("Expert", "Athletics")
                ),
                "Lion Blade Dedication" => new HaveSpecificFeat("LionBladeDedication"),
                "Lost in the Crowd" => new HaveSpecificFeat("LostInTheCrowd"),
                "Ancient Osiriani and Sphinx languages, trained in Crafting" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("AncientOsiriani"),
                    new HaveSpecificLanguage("Sphinx"),
                    new HaveSpecificSkillProficiency("Trained", "Crafting")
                ),
                "Living Monolith Dedication, a sphinx or living monolith with this feat performs a ritual with you" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("LivingMonolithDedication"),
                    new Manual("A sphinx or living monolith with this feat performs a ritual with you.")
                ),
                "Ka Stone Ritual" => new HaveSpecificFeat("KaStoneRitual"),
                "ability to cast focus spells" => new HaveFocusPool(),
                "Magic Warrior Dedication" => new HaveSpecificFeat("MagicWarriorDedication"),
                "trained in sawtooth sabers, deity is Achaekek, lawful evil alignment, member of the Red Mantis assassins" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificMeleeWeaponSpecificProficiency("Trained", "SawtoothSaber"),
                    new HaveSpecificDeity("Achaekek"),
                    new HaveSpecificAlignment("LawfulEvil"),
                    new Manual("Member of the Red Mantis assassins.")
                ),
                "trained in Religion, Red Mantis Assassin Dedication" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Trained", "Religion"), new HaveSpecificFeat("Red MantisAssassinDedication")),
                "Basic Red Mantis Magic" => new HaveSpecificFeat("BasicRedMantisMagic"),
                "Red Mantis Assassin Dedication" => new HaveSpecificFeat("RedMantisAssassinDedication"),
                "Runescarred Dedication" => new HaveSpecificFeat("RunescarredDedication"),
                "Spell Runes" => new HaveSpecificFeat("SpellRunes"),
                "powerful fist or expert in unarmed attacks; member of a House of Perfection" => BooleanPrerequisite.And(templater,
                    BooleanPrerequisite.Or(templater, 
                        new HaveSpecificClassFeature("PowerfulFist", "Monks"),
                        new HaveSpecificWeaponCategorySpecificProficiency("Expert", "Unarmed")
                    ),
                    new Manual("Member of a House of Perfection.")
                ),
                "Student of Perfection Dedication" => new HaveSpecificFeat("StudentOfPerfectionDedication"),
                "expert in Arcana, Arcane Sense" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificSkillProficiency("Expert", "Arcana"),
                    new HaveSpecificFeat("ArcaneSense")
                ),
                "You have a spellcasting class feature with the divine or primal tradition" => BooleanPrerequisite.Or(templater, 
                    new HaveSpecificMagicTradition("Divine"),
                    new HaveSpecificMagicTradition("Primal")
                ),
                "Arcane Tattoos" => new HaveSpecificFeat("ArcaneTattoos"),
                "Saoc Astrology" => new HaveSpecificFeat("SaocAstrology"),
                "Ornate Tattoo" => new HaveSpecificFeat("OrnateTatto"),
                "wintertouched human heritage" => new HaveSpecificHeritage("WintertouchedHuman"),
                "Shory Aeromancer or ability to cast fly" => BooleanPrerequisite.Or(templater, 
                    new HaveSpecificFeat("ShoryAeromancer"),
                    new HaveSpecificSpell("Fly")
                ),
                "Wildborn Magic" => new HaveSpecificFeat("WildbornMagic"),
                "Share Thoughts" => new HaveSpecificFeat("ShareThoughts"),
                "Battle Medicine, master in Medicine" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("BattleMedicine"), new HaveSpecificSkillProficiency("Master", "Medicine")),
                "Knight Vigilant Dedication, Shield Block" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("KnightVigilantDedication"), new HaveSpecificFeat("ShieldBlock")),
                "Uzunjati Recollection" => new HaveSpecificFeat("UzunjatiRecollection"),
                "member of the Bright Lions, not a worshipper of Walkena, trained in Stealth;" => BooleanPrerequisite.And(templater, 
                    new Manual("Member of the Bright Lions."), 
                    new WorshipSpecificDeity("Walkena", isNegated: true), 
                    new HaveSpecificSkillProficiency("Trained", "Stealth")),
                "Bright Lion Dedication" => new HaveSpecificFeat("BrightLionDedication"),
                "Crimson Shroud" => new HaveSpecificFeat("CrimsonShroud"),
                "Achaekekâ€™s Grip, Advanced Red Mantis Magic" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("AchaekeksGrip"), new HaveSpecificFeat("AdvancedRedMantisMagic")),
                "Oozemorph Dedication" => new HaveSpecificFeat("OozemorphDedication"),
                "Oozemorph Dedication, trained in Performance" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("OozemorphDedication"), new HaveSpecificSkillProficiency("Trained", "Performance")),
                "Oozemorph Dedication, at least two other class feats from the oozemorph archetype" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("OozemorphDedication"),
                    new Manual("At least two other class feats from the oozemorph archetype.")
                ),
                "Disturbing Defense" => new HaveSpecificFeat("DisturbingDefense"),
                "Spellmaster's Resilience" => new HaveSpecificFeat("SpellmastersResilience"),
                "Spellmaster Dedication, master in spell attack rolls and spell DCs" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("SpellmasterDedication"),
                    new HaveSpecificSpellAttackProficiency("Master"),
                    new HaveSpecificSpellDcProficiency("Master")
                ),
                "Absorb Spell" => new HaveSpecificFeat("AbsorbSpell"),
                "trained in Diplomacy, Intimidation, or Performance" => BooleanPrerequisite.Or(templater, 
                    new HaveSpecificSkillProficiency("Trained", "Diplomacy"),
                    new HaveSpecificSkillProficiency("Trained", "Intimidation"),
                    new HaveSpecificSkillProficiency("Trained", "Performance")
                ),
                "Swordmaster Dedication; trained in light, medium, or heavy armor" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("SwordmasterDedication"),
                    BooleanPrerequisite.Or(templater, 
                        new HaveSpecificArmorCategorySpecificProficiency("Trained", "Light"),
                        new HaveSpecificArmorCategorySpecificProficiency("Trained", "Medium"),
                        new HaveSpecificArmorCategorySpecificProficiency("Trained", "Heavy")
                    )
                ),
                "master in Arcana, Crafting, Nature, Occultism, or Religion; Scrollmaster Dedication" => BooleanPrerequisite.And(templater, 
                    BooleanPrerequisite.Or(templater,
                        new HaveSpecificSkillProficiency("Master", "Arcana"),
                        new HaveSpecificSkillProficiency("Master", "Crafting"),
                        new HaveSpecificSkillProficiency("Master", "Nature"),
                        new HaveSpecificSkillProficiency("Master", "Occultism"),
                        new HaveSpecificSkillProficiency("Master", "Religion")),
                    new HaveSpecificFeat("ScollmasterDedication")
                ),
                "Rain of Embers Stance" => new HaveSpecificFeat("RainOfEmbersStance"),
                "expert in Crafting, Pathfinder Agent Dedication" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificSkillProficiency("Expert", "Crafting"), 
                    new HaveSpecificFeat("PathfinderAgentDedication")    
                ),
                "Pathfinder Agent Dedication, trained in Survival" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("PathfinderAgentDedication"), new HaveSpecificSkillProficiency("Trained", "Survival")),
                "Lore Seeker" => new HaveSpecificFeat("LoreSeeker"),
                "Pathfinder Agent Dedication, Thorough Reports" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("PathfinderAgentDedication"), new HaveSpecificFeat("ThoroughReports")),
                "Pathfinder Agent Dedication, master in a skill used to Recall Knowledge" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("PathfinderAgentDedication"), 
                    new HaveSpecificRecallKnowledgeProficiency("Master", false)
                ),
                "Swordmaster Dedication, master in Medicine" => BooleanPrerequisite.And(templater,
                    new HaveSpecificFeat("SwordmasterDedication"),
                    new HaveSpecificSkillProficiency("Master", "Medicine")
                ),
                "Blazing Talon Surge" => new HaveSpecificFeat("BlazingTalonSurge"),
                "trained in Acrobatics and medium armor" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificSkillProficiency("Trained", "Acrobatics"), 
                    new HaveSpecificArmorCategorySpecificProficiency("Trained", "Medium")
                ),
                "Swordmaster Dedication, expert in Crafting" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("SwordmasterDedication"), new HaveSpecificSkillProficiency("Expert", "Crafting")),
                "master in a skill with the Recall Knowledge action, Scrollmaster Dedication" => BooleanPrerequisite.And(templater,
                    new HaveSpecificRecallKnowledgeProficiency("Master", false),
                    new HaveSpecificFeat("ScrollmasterDedication")
                ),
                "Swordmaster Dedication, expert in Athletics and Acrobatics" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("SwordmasterDedication"), 
                    new HaveSpecificSkillProficiency("Expert", "Athletics"), 
                    new HaveSpecificSkillProficiency("Expert", "Acrobatics")
                ),
                "Swordmaster Dedication, expert in a skill used to Recall Knowledge" => BooleanPrerequisite.And(templater,
                    new HaveSpecificFeat("SwordmasterDedication"),
                    new HaveSpecificRecallKnowledgeProficiency("Expert", false)
                ),
                "Swordmaster Dedication, master in Survival" => BooleanPrerequisite.And(templater,
                    new HaveSpecificFeat("SwordmasterDedication"),
                    new HaveSpecificSkillProficiency("Master", "Survival")
                ),
                "master in Medicine, Pathfinder Agent Dedication" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificSkillProficiency("Master", "Medicine"), 
                    new HaveSpecificFeat("PathfinderAgentDedication")
                ),
                "Shoulder Catastrophe" => new HaveSpecificFeat("ShoulderCatastrophe"),
                "Swordmaster Dedication, master in Diplomacy" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("SwordmasterDedication"), new HaveSpecificSkillProficiency("Master", "Diplomacy")),
                "Pathfinder Agent Dedication, Wayfinder Resonance Tinkerer" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("PathfinderAgentDedication"), new HaveSpecificFeat("WayfinderResonanceTinkerer")),
                "Intelligence 14 or Wisdom 14" => BooleanPrerequisite.And(templater, 
                    BooleanPrerequisite.Or(templater, 
                        new HaveSpecificStat(14, "Intelligence"), 
                        new HaveSpecificStat(14, "Wisdom")
                    )
                ),
                "Edgewatch Detective Dedication" => new HaveSpecificFeat("EdgewatchDetectiveDedication"),
                "expert in unarmed strikes" => new HaveSpecificWeaponCategorySpecificProficiency("Expert", "Unarmed"),
                "Jalmeri Heavenseeker Dedication" => new HaveSpecificFeat("JalmeriHeavenseekerDedication"),
                "Sky and Heaven Stance" => new HaveSpecificFeat("SkyAndHeavenStance"),
                "Provocator Dedication" => new HaveSpecificFeat("ProvocatorDedication"),
                "Provocator Dedication, expert in any kind of weapon or unarmed attack" => BooleanPrerequisite.And(templater,
                    new HaveSpecificFeat("ProvocatorDedication"),
                    BooleanPrerequisite.Or(templater, 
                        new HaveAnyMeleeWeaponSpecificProficiency("Expert"),
                        new HaveAnyRangedWeaponSpecificProficiency("Expert"),
                        new HaveAnyWeaponCategorySpecificProficiency("Expert"),
                        new HaveAnyWeaponGroupSpecificProficiency("Expert")
                    )
                ),
                "Quick Draw" => new HaveSpecificFeat("QuickDraw"),
                "Skillful Tail" => new HaveSpecificFeat("SkillfulTail"),
                "Wings of Air" => new HaveSpecificFeat("WingsOfAir"),
                "Elemental Assault" => new HaveSpecificFeat("ElementalAssault"),
                "Elemental Bulwark" => new HaveSpecificFeat("ElementalBulwark"),
                "Genie Weapon Familiarity" => new HaveSpecificFeat("GenieWeaponFamiliarity"),
                "Nanite Surge" => new HaveSpecificFeat("NaniteSurge"),
                "Clever Shadow" => new HaveSpecificFeat("Clevershadow"),
                "Living Weapon" => new HaveSpecificFeat("LivingWeapon"),
                "at least one innate spell from a kitsune heritage or ancestry feat" => new Manual("At least one innate spell from a kitsune heritage or ancestry feat."),
                "tailless alternate form" => new Manual("Tailless alternate form."),
                "Star Orb" => new HaveSpecificFeat("StarOrb"),
                "Kitsune Spell Mysteries" => new HaveSpecificFeat("KitsuneSpellMysteries"),
                "Change Shape with a fox alternate form" => new Manual("Change Shape with a fox alternate form."),
                "nyktera sprite heritage" => new HaveSpecificHeritage("NykteraSprite"),
                "ability to communicate with some type of animals (such as bats or arthropods)" => new Manual("Ability to communicate with some type of animals (such as bats or arthropods)."),
                "Evanescent Wings" => new HaveSpecificFeat("EvanescentWings"),
                "Energize Wings" => new HaveSpecificFeat("EnergizeWings"),
                "Juvenile Flight" => new HaveSpecificFeat("JuvenileFlight"),
                "Crystalline Dust" => new HaveSpecificFeat("CrystallineDust"),
                "Riftmarked" => new HaveSpecificFeat("Riftmarked"),
                "Beastbrood" => new HaveSpecificFeat("Beastbrood"),
                "Shackleborn" => new HaveSpecificFeat("Shackleborn"),
                "Devil in Plain Sight" => new HaveSpecificFeat("DevilInPlainSight"),
                "dogtooth tengu heritage" => new HaveSpecificHeritage("DogtoothTengu"),
                "Tengu Feather Fan" => new HaveSpecificFeat("TenguFeatherFan"),
                "Eclectic Sword Training" => new HaveSpecificFeat("EclecticSwordTraining"),
                "Eat Fortune" => new HaveSpecificFeat("EatFortune"),
                "Stormâ€™s Lash" => new HaveSpecificFeat("StormsLash"),
                "Soaring Flight" => new HaveSpecificFeat("SoaringFlight"),
                "Vicious Incisors" => new HaveSpecificFeat("VivaciousIncisors"),
                "longsnout rat heritage" => new HaveSpecificHeritage("LongsnoutRat"),
                "Overcrowd" => new HaveSpecificFeat("Overcrowd"),
                "wavediver tengu heritage" => new HaveSpecificHeritage("WavediverTengu"),
                "Wind Godâ€™s Fan" => new HaveSpecificFeat("WindGodsFan"),
                "trained in Athletics, Lightning Tongue" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificSkillProficiency("Trained", "Athletics"), 
                    new HaveSpecificFeat("LightningTongue")
                ),
                "Flexible Tail" => new HaveSpecificFeat("FlexibleTail"),
                "trained in Astrology Lore or Occultism" => BooleanPrerequisite.Or(templater, 
                    new HaveSpecificLoreSpecificProficiency("Trained", "AStrology"), 
                    new HaveSpecificSkillProficiency("Trained", "Occultism")
                ),
                "Orc Warmask" => new HaveSpecificFeat("OrcWarmask"),
                "Beast Trainer" => new HaveSpecificFeat("BeastTrainer"),
                "expert in Intimidation, Orc Warmask" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificSkillProficiency("Expert", "Intimidation"), 
                    new HaveSpecificFeat("OrcWarmask")
                ),
                "Seedpod" => new HaveSpecificFeat("Seedpod"),
                "expert in Deception or Intimidation, Snare Crafting" => BooleanPrerequisite.And(templater, 
                    BooleanPrerequisite.Or(templater,
                        new HaveSpecificSkillProficiency("Expert", "Deception"),
                        new HaveSpecificSkillProficiency("Expert", "Intimidation")),
                    new HaveSpecificFeat("SnareCrafting")
                ),
                "cloudleaper lizardfolk heritage" => new HaveSpecificHeritage("CloudleaperLizardfolk"),
                "Winglets" => new HaveSpecificFeat("Winglets"),
                "Kobold Weapon Familiarity" => new HaveSpecificFeat("KoboldWeaponFamiliarity"),
                "strongjaw kobold heritage, venomtail kobold heritage, Dracomancer, or Kobold Breath" => BooleanPrerequisite.Or(templater,
                    new HaveSpecificHeritage("StrongjawKobold"),
                    new HaveSpecificHeritage("VenomtalKobold"),
                    new HaveSpecificFeat("Dracomancer"),
                    new HaveSpecificFeat("KoboldBreath")
                ),
                "Hatchling Flight" => new HaveSpecificFeat("HatchlingFlight"),
                "Vanthâ€™s Weapon Familiarity" => new HaveSpecificFeat("VanthsWeaponFamiliarity"),
                "Ru-Shi" => new HaveSpecificFeat("RuShi"),
                "Cel Rau, Straveika, Svetocher, or another lineage from a vampire with the Drink Blood ability" => new Manual("Cel Rau, Straveika, Svetocher, or another lineage from a vampire with the Drink Blood ability."),
                "an animal companion or a familiar" => BooleanPrerequisite.Or(templater, 
                    new HaveSpecificAnimalCompanionAmount("GreaterThanOrEqualTo", 1),
                    new HaveAnyFamiliar()
                ),
                "ability to cast at least one spell with the darkness trait" => new HaveAnySpellSpecificTrait("Darkness"),
                "ability to cast heal and harm" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificDivineFont("Harm"),
                    new HaveSpecificDivineFont("Heal")
                ),
                "Virga May" => new HaveSpecificFeat("VirgaMay"),
                "Brine May, Snow May, Veil May, or Virga May" => BooleanPrerequisite.Or(templater,
                    new HaveSpecificFeat("BrineMay"),
                    new HaveSpecificFeat("SnowMay"),
                    new HaveSpecificFeat("VeilMay"),
                    new HaveSpecificFeat("VirgaMay")
                ),
                "winter catfolk heritage" => new HaveSpecificHeritage("WinterCatfolk"),
                "Cat Nap, focus pool" => BooleanPrerequisite.And(templater,
                    new HaveSpecificFeat("CatNap"),
                    new HaveFocusPool()
                ),
                "Catâ€™s Luck" => new HaveSpecificFeat("CatsLuck"),
                "Evade Doom" => new HaveSpecificFeat("EvadeDoom"),
                "Invoke the Elements" => new HaveSpecificFeat("InvokeTheElements"),
                "Adhyabhau" => new HaveSpecificFeat("Adhyabhau"),
                "Plumekith" => new HaveSpecificFeat("Plumekith"),
                "Halo" => new HaveSpecificFeat("Halo"),
                "Idyllkin" => new HaveSpecificFeat("Idyllkin"),
                "Emberkin" => new HaveSpecificFeat("Emberkin"),
                "Azarketi Weapon Familiarity" => new HaveSpecificFeat("AzarketiWeaponFamiliarity"),
                "Drag Down, expert in Athletics" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("DragDown"), new HaveSpecificSkillProficiency("Expert", "Athletics")),
                "Water Strider" => new HaveSpecificFeat("WaterStrider"),
                "trained in Occultism or Religion" => BooleanPrerequisite.Or(templater, new HaveSpecificSkillProficiency("Trained", "Occultism"), new HaveSpecificSkillProficiency("Trained", "Religion")),
                "Ghost Hunter Dedication" => new HaveSpecificFeat("GhostHunterDedication"),
                "trained in Arcana and Occultism" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Trained", "Arcana"), new HaveSpecificSkillProficiency("Trained", "Occultism")),
                "Eldritch Researcher Dedication" => new HaveSpecificFeat("EldritchResearcherDedication"),
                "Seeker of Truths" => new HaveSpecificFeat("SeekerOfTruths"),
                "trained in the hand crossbow" => new HaveSpecificRangedWeaponSpecificProficiency("Trained", "HandCrossbow"),
                "Drow Shootist Dedication" => new HaveSpecificFeat("DrowShootistDedication"),
                "Drow Shootist Dedication; trained in Crafting" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("DrowShootistDedication"), new HaveSpecificSkillProficiency("Trained", "Crafting")),
                "You must have a signature trick." => new Manual("You must have a signature trick."),
                "tusks unarmed attack" => new HaveSpecificUnarmedAttack("Tusks"),
                "Ceremony of Protection" => new HaveSpecificFeat("CeremonyOfProtection"),
                "Ceremony of the Evened Hand" => new HaveSpecificFeat("CeremonyOfTheEvenedHand"),
                "vicious goloma heritage" => new HaveSpecificHeritage("ViciousGoloma"),
                "Watchful Gaze" => new HaveSpecificFeat("WatchfulGaze"),
                "you are adjacent to at least two enemies" => new Manual("You are adjecent to at least two enemies."),
                "ability to cast the detect magic cantrip" => new HaveSpecificSpell("DetectMagic"),
                "witch gnoll heritage" => new HaveSpecificHeritage("WitchGnoll"),
                "Gnoll Weapon Familiarity" => new HaveSpecificFeat("GnollWeaponFamiliarity"),
                "expert in Stealth, Pack Hunter" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificSkillProficiency("Expert", "Stealth"), 
                    new HaveSpecificFeat("PackHunter")    
                ),
                "sweetbreath gnoll heritage" => new HaveSpecificHeritage("SweetbreathGnoll"),
                "Gnoll Weapon Practicality" => new HaveSpecificFeat("GnollWEaponPracticality"),
                "windweb grippli" => new HaveSpecificHeritage("WindwebGrippli"),
                "Grippli Weapon Familiarity" => new HaveSpecificFeat("GrippliWeaponFamiliarity"),
                "snaptongue grippli" => new HaveSpecificHeritage("SnaptongueGrippli"),
                "You are not immune to diseases or poisons" => new Manual("You are not immune to diseases or poisons."),
                "master in Athletics, Wall Jump" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificSkillProficiency("Master", "Athletics"), 
                    new HaveSpecificFeat("WallJump")
                ),
                "quillcoat shisk or quill unarmed attack" => BooleanPrerequisite.Or(templater, 
                    new HaveSpecificHeritage("QuillcoatShisk"),
                    new HaveSpecificUnarmedAttack("Quill") 
                ),
                "Spine Stabber" => new HaveSpecificFeat("SpineStabber"),
                "quillcoat shisk" => new HaveSpecificHeritage("QuillcoatShisk"),
                "venomous anadi heritage" => new HaveSpecificHeritage("VenomousAnadi"),
                "Studious Magic" => new HaveSpecificFeat("StudiousMagic"),
                "legendary in Thievery, Pickpocket" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificSkillProficiency("Legendary", "Thievery"), 
                    new HaveSpecificFeat("Pickpocket")
                ),
                "Living Hair" => new HaveSpecificFeat("LivingHair"),
                "legendary in Thievery" => new HaveSpecificSkillProficiency("Legendary", "Thievery"),
                "vivacious speed" => new HaveSpecificClassFeature("VivaciousSpeed", "Swashbucklers"),
                "Collateral Thrash" => new HaveSpecificFeat("CollateralThrash"),
                "Monstrosity Shape" => new HaveSpecificFeat("MonstrosityShape"),
                "ability to cast spells; Dexterity 14; expert in Acrobatics" => BooleanPrerequisite.And(templater, 
                    new HaveAnyMagicTradition(),
                    new HaveSpecificStat(14, "Dexterity"), 
                    new HaveSpecificSkillProficiency("Expert", "Acrobatics")),
                "Sixth Pillar Dedication" => new HaveSpecificFeat("SixthPillarDedication"),
                "master in Underworld Lore" => new HaveSpecificLoreSpecificProficiency("Master", "Underworld"),
                "trained in butterfly swords" => new HaveSpecificMeleeWeaponSpecificProficiency("Trained", "ButterflySword"),
                "Spellstrike" => new HaveSpecificFeat("Spellstrike"),
                "You have one or more hands free." => new Manual("You have one or more hands free."),
                "Arcane Cascade, inexorable iron hybrid study, Spellstrike" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("ArcaneCascade"),
                    new HaveSpecificHybridStudy("InexorableIron"),
                    new HaveSpecificFeat("Spellstrike")
                ),
                "laughing shadow hybrid study, Spellstrike" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificHybridStudy("LaughingShadow"),
                    new HaveSpecificFeat("Spellstrike")
                ),
                "sparkling targe hybrid study" => new HaveSpecificHybridStudy("SparklingTarge"),
                "Arcane Cascade, starlit span hybrid study" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("ArcaneCascade"),
                    new HaveSpecificHybridStudy("StarlitSpan")
                ),
                "Arcane Cascade, twisting tree hybrid study" => BooleanPrerequisite.And(templater,
                    new HaveSpecificFeat("ArcaneCascade"),
                    new HaveSpecificHybridStudy("TwistingTree")
                ),
                "Arcane Cascade, focus pool" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("ArcaneCascade"),
                    new HaveFocusPool()
                ),
                "Raise a Tome" => new HaveSpecificFeat("RaiseATome"),
                "Arcane Cascade" => new HaveSpecificFeat("ArcaneCascade"),
                "Arcane Cascade, sparkling targe hybrid study" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("ArcaneCascade"),
                    new HaveSpecificHybridStudy("SparklingTarge")
                ),
                "dimensional assault focus spell, laughing shadow hybrid study" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificSpell("DimensionalAssault"),
                    new HaveSpecificHybridStudy("LaughingShadow")
                ),
                "Spellstrike, twisting tree hybrid study" => BooleanPrerequisite.And(templater,
                    new HaveSpecificFeat("Spellstrike"),
                    new HaveSpecificHybridStudy("TwistingTree")
                ),
                "Spellstrike, starlit span hybrid study" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("Spellstrike"),
                    new HaveSpecificHybridStudy("StarlitSpan")
                ),
                "Arcane Cascade, inexorable iron hybrid study" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("ArcaneCascade"),
                    new HaveSpecificHybridStudy("InexorableIron")
                ),
                "conflux spells" => new HaveSpecificClassFeature("ConfluxSpells", "Magusi"),
                "Arcane Cascade, Spellstrike" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("ArcaneCascade"),
                    new HaveSpecificFeat("Spellstrike")
                ),
                "Spell Parry" => new HaveSpecificFeat("SpellParry"),
                "Conflux focus" => new HaveSpecificFeat("ConfluxFocus"),
                "flame order" => new HaveSpecificDruidicOrder("Flame"),
                "wave order" => new HaveSpecificDruidicOrder("Wave"),
                "stone order" => new HaveSpecificDruidicOrder("Stone"),
                "flame order, stone order, storm order, or wave order" => BooleanPrerequisite.Or(templater,
                    new HaveSpecificDruidicOrder("Flame"),
                    new HaveSpecificDruidicOrder("Stone"),
                    new HaveSpecificDruidicOrder("Storm"),
                    new HaveSpecificDruidicOrder("Wave")
                ),
                "fire order" => new HaveSpecificDruidicOrder("Fire"),
                "Stoked Flame Stance" => new HaveSpecificFeat("StokedFlameStance"),
                "Reflective Ripple Stance" => new HaveSpecificFeat("ReflectiveRippleStance"),
                "Summoner Dedication" => new HaveSpecificFeat("SummonerDedication"),
                "Basic Synergy" => new HaveSpecificFeat("BasicSynergy"),
                "Basic Summoner Spellcasting, master in the skill associated with your eidolonâ€™s tradition" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("BasicSummonerSpellcasting"),
                    new Manual("Master in the skill associated with your eidolon's tradition.")
                ),
                "Expert Summoner Spellcasting, legendary in the skill associated with your eidolonâ€™s tradition" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("ExpertSummonerSpellcasting"),
                    new Manual("Legendary in the skill associated with your eidolon's tradition.")
                ),
                "Advanced Synergy" => new HaveSpecificFeat("AdvancedSynergy"),
                "Strength 14 or Dexterity 14, Intelligence 14" => BooleanPrerequisite.And(templater, BooleanPrerequisite.Or(templater, new HaveSpecificStat(14, "Strength"), new HaveSpecificStat(14, "Dexterity")), new HaveSpecificStat(14, "Intelligence")),
                "Magus Dedication" => new HaveSpecificFeat("MagusDedication"),
                "Basic Martial Magic" => new HaveSpecificFeat("BasicMartialMagic"),
                "Basic Magus Spellcasting, master in Arcana" => BooleanPrerequisite.And(templater, , new HaveSpecificSkillProficiency("Master", "Arcana")),
                "Expert Magus Spellcasting, legendary in Arcana" => BooleanPrerequisite.And(templater, , new HaveSpecificSkillProficiency("Legendary", "Arcana")),
                "trained in Nature; ability to cast spells from spell slots; at least one spell with the air, cold, earth, fire, plant, or water trait" => BooleanPrerequisite.And(templater,
                    new HaveSpecificSkillProficiency("Trained", "Nature"), 
                    new Manual("Ability to cast spells from spell slots."),
                    BooleanPrerequisite.Or(templater, 
                        new HaveAnySpellSpecificTrait("Air"),
                        new HaveAnySpellSpecificTrait("Cold"),
                        new HaveAnySpellSpecificTrait("Earth"),
                        new HaveAnySpellSpecificTrait("Fire"),
                        new HaveAnySpellSpecificTrait("Plant"),
                        new HaveAnySpellSpecificTrait("Water")
                    )
                ),
                "Geomancer Dedication" => new HaveSpecificFeat("GeomancerDedication"),
                "Geomancer Dedication, expert in Nature" => BooleanPrerequisite.And(templater,
                    new HaveSpecificFeat("GeomancerDedication"),
                    new HaveSpecificSkillProficiency("Expert", "Nature")
                ),
                "Rough Terrain Stance, master in Nature" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("RoughtTerrainStance"),
                    new HaveSpecificSkillProficiency("Master", "Nature")
                ),
                "Geomancer Dedication, legendary in Nature" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("GeomancerDedication"), new HaveSpecificSkillProficiency("Legendary", "Nature")),
                "Geomancer Dedication, master in Nature" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("GeomancerDedication"), new HaveSpecificSkillProficiency("Master", "Nature")),
                "Wis 14 or ability to cast divine spells" => BooleanPrerequisite.Or(templater, new HaveSpecificStat(14, "Wisdom"), new HaveSpecificMagicTradition("Divine")),
                "Armor only" => ,
                "Melee weapon only" => ,
                "Armor or shield only" => ,
                "Weapon Only" => ,
                "Manifest Soulforged Armament" => new HaveSpecificFeat("ManifestSoulforgedArmament"),
                "Shield only" => ,
                "Armor and Shield only" => ,
                "Soulforger Dedication" => new HaveSpecificFeat("SoulforgerDedication"),
                "flexible spell preparation" => ,
                "wellspring magic" => new HaveSpecificFeat("WellspringMagic"),
                "Wellspring Mage Dedication" => new HaveSpecificFeat("WellspringMageDedication"),
                "your eidolon is a phantom" => new Manual("Your eidolon is a phantom."),
                "Shrink Down" => new HaveSpecificFeat("ShrinkDown"),
                "Bloodletting Claws" => new HaveSpecificFeat("BloodlettingClaws"),
                "Energy Heart" => new HaveSpecificFeat("EnergyHeart"),
                "Magical Understudy" => new HaveSpecificFeat("MagicalUnderstudy"),
                "Hulking Size" => new HaveSpecificFeat("HulkingSize"),
                "link spells" => ,
                "Glider Form" => new HaveSpecificFeat("GliderForm"),
                "Link Focus" => new HaveSpecificFeat("LinkFocus"),
                "Master Summoner" => new HaveSpecificFeat("MasterSummoner"),
                "Magical Adept" => new HaveSpecificFeat("MagicalAdept"),
                "runelord specialization" => ,
                "Runelord Dedication, trained in Crafting" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("RunelordDedication"), new HaveSpecificSkillProficiency("Trained", "Crafting")),
                "Runelord Dedication" => new HaveSpecificFeat("RunelordDedication"),
                "Counterspell, Runelord Dedication" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("Counterspell"),
                    new HaveSpecificFeat("RunelordDedication")
                ),
                "Embed Aeon Stone" => new HaveSpecificFeat("EmbedAeonStone"),
                "elemental magic" => ,
                "Elementalist Dedication, Familiar" => BooleanPrerequisite.And(templater,
                    new HaveSpecificFeat("ElementalDedication"),
                    new HaveSpecificFeat("Familiar")
                ),
                "Elementalist Dedication" => new HaveSpecificFeat("ElementalistDedication"),
                "trained in Intimidation and at least one of Arcana, Nature, Occult, and Religion" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificSkillProficiency("Trained", "Intimidation"),
                    BooleanPrerequisite.Or(templater,
                        new HaveSpecificSkillProficiency("Trained", "Arcana"),
                        new HaveSpecificSkillProficiency("Trained", "Nature"),
                        new HaveSpecificSkillProficiency("Trained", "Occultism"),
                        new HaveSpecificSkillProficiency("Trained", "Religion"))
                ),
                "Folklorist Dedication" => new HaveSpecificFeat("FolkloristDedication"),
                "trained in Performance and trained in Society" => BooleanPrerequisite.And(templater, new HaveSpecificSkillProficiency("Trained", "Performance"), new HaveSpecificSkillProficiency("Trained", "Society")),
                "Nantambu Chime-Ringer Dedication" => new HaveSpecificFeat("NantambuChimeRingerDedication"),
                "Cha 14 or ability to cast spells from spell slots" => BooleanPrerequisite.Or(templater, 
                    new HaveSpecificStat(14, "Charisma"),
                    new Manual("Ability to cast spells from spell slots.")
                ),
                "Cathartic Mage Dedication" => new HaveSpecificFeat("CatharticMageDedication"),
                "Expert Cathartic Spellcasting" => new HaveSpecificFeat("ExpertCatharticSpellcasting"),
                "Basic Cathartic Spellcasting" => new HaveSpecificFeat("BasicCatharticSpellcasting"),
                "ability to cast spells" => new HaveAnyMagicTradition(),
                "Shadowcaster Dedication" => new HaveSpecificFeat("ShadowdancerDedication"),
                "Shadow Reservoir" => new HaveSpecificFeat("ShadowReservoir"),
                "ability to cast spells from spell slots, Shadowcaster Dedication" => BooleanPrerequisite.And(templater, 
                    new Manual("Ability to cast spells from spell slots."),
                    new HaveSpecificFeat("ShadowcasterDedication")
                ),
                "focus pool, Shadowcaster Dedication" => BooleanPrerequisite.And(templater, 
                    new HaveFocusPool(),
                    new HaveSpecificFeat("ShadowcasterDedication")
                ),
                "precise discipline subconscious mind" => ,
                "emotional acceptance subconscious mind" => ,
                "silent whisper conscious mind" => ,
                "distant grasp conscious mind" => ,
                "infinite eye conscious mind" => ,
                "Scroll Thaumaturgy" => new HaveSpecificFeat("ScrollThamaturgy"),
                "Find Flaws" => new HaveSpecificFeat("FindFlaws"),
                "Talisman Esoterica" => new HaveSpecificFeat("TalismanEsoterica"),
                "Esoteric Antithesis" => new HaveSpecificFeat("EsotericAntithesis"),
                "Esoteric Warden" => new HaveSpecificFeat("EsotericWarden"),
                "Handy Esoterica" => new HaveSpecificFeat("HandyEsoterica"),
                "Scroll Esoterica" => new HaveSpecificFeat("ScrollEsoterica"),
                "Elaborate Talisman Esoterica" => new HaveSpecificFeat("ElaborateTalismanEsoterica"),
                "Draw Warding Circle" => new HaveSpecificFeat("DrawWardingCircle"),
                "an implement that grants a reaction" => new Manual("An implement that grants a reaction."),
                "Elaborate Scroll Esoterica" => new HaveSpecificFeat("ElaborateScrollEsoterica"),
                "Share Antithesis" => new HaveSpecificFeat("ShareAntithesis"),
                "legendary in Arcana, Nature, Occultism, or Religion" => BooleanPrerequisite.Or(templater, 
                    new HaveSpecificSkillProficiency("Legendary", "Arcana"),
                     new HaveSpecificSkillProficiency("Legendary", "Nature"),
                      new HaveSpecificSkillProficiency("Legendary", "Occultism"),
                       new HaveSpecificSkillProficiency("Legendary", "Religion")),
                "Thaumaturgeâ€™s Demesne" => new HaveSpecificFeat("ThaumaturgesDemesne"),
                "hunter automaton" => new HaveSpecificHeritage("HunterAutomaton"),
                "warrior automaton" => new HaveSpecificHeritage("WarriorAutomaton"),
                "mage automaton" => new HaveSpecificHeritage("MageAutomaton"),
                "sharpshooter automaton" => new HaveSpecificHeritage("SharpshooterAutomaton"),
                "Medium or Small size" => BooleanPrerequisite.Or(templater, 
                    new HaveSpecificSize("Medium"),
                    new HaveSpecificSize("Small")
                ),
                "Munitions Crafter, expert in Crafting" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("MunitionsCrafter"), new HaveSpecificSkillProficiency("Expert", "Crafting")),
                "way of the pistolero" => new HaveSpecificGunslingersWay("WayOfThePistolero"),
                "way of the drifter" => new HaveSpecificGunslingersWay("WayOfTheDrifter"),
                "Hit the Dirt!" => new HaveSpecificFeat("HitTheDirt"),
                "way of the sniper" => new HaveSpecificGunslingersWay("WayOfTheSniper"),
                "Munitions Machinist" => new HaveSpecificFeat("MunitionsMachinist"),
                "way of the vanguard" => new HaveSpecificGunslingersWay("WayOfTheVanguard"),
                "Pistoleroâ€™s Challenge" => new HaveSpecificFeat("PistolersChallenge"),
                "Pistol Twirl, master in Deception" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("PistolTwirl"), new HaveSpecificSkillProficiency("Master", "Deception")),
                "initial deed that allows you to Interact to draw a weapon" => new Manual("Initial deed that allows you to Interact to draw a weapon."),
                "Ricochet Shot" => new HaveSpecificFeat("RicochetShot"),
                "Black Powder Boost" => new HaveSpecificFeat("BlackPowderBoost"),
                "Ricochet Master" => new HaveSpecificFeat("RicochetMaster"),
                "Grit and Tenacity" => new HaveSpecificFeat("GritAndTenacity"),
                "trained in martial weapons" => new HaveSpecificWeaponCategorySpecificProficiency("Trained", "Martial"),
                "expert in unarmored defense and trained in simple weapons" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificArmorCategorySpecificProficiency("Expert", "Unarmed"),
                    new HaveSpecificWeaponCategorySpecificProficiency("Trained", "Simple")
                ),
                "Bullet Dancer Burn" => new HaveSpecificFeat("BulletDancerBurn"),
                "Bullet Dancer Stance" => new HaveSpecificFeat("BulletDancerStance"),
                "Bullet Dancer Dedication, Trick Shot" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("BulletDancerDedication"),
                    new HaveSpecificFeat("TrickShot")
                ),
                "Bullet Dancer Dedication" => new HaveSpecificFeat("BulletDancerDedication"),
                "trained in at least one type of one-handed firearm, trained in Deception, trained in Performance" => BooleanPrerequisite.And(templater, 
                    new Manual("Trained in at least one type of one-handed firearm."),
                    new HaveSpecificSkillProficiency("Trained", "Deception"),
                    new HaveSpecificSkillProficiency("Trained", "Performance")
                ),
                "Pistol Phenom Dedication" => new HaveSpecificFeat("PistolPhenomDedication"),
                "trained in at least one type of weapon in the bow or firearm groups, trained in Stealth" => BooleanPrerequisite.And(templater, 
                    BooleanPrerequisite.Or(templater,
                        new HaveSpecificWeaponGroupSpecificProficiency("Trained", "Bow"),
                        new HaveSpecificWeaponGroupSpecificProficiency("Trained", "Firearm")
                    ),
                    new HaveSpecificSkillProficiency("Trained", "Stealth")
                ),
                "Sniping Duo Dedication" => new HaveSpecificFeat("SnipingDuoDedication"),
                "Unexpected Sharpshooter Dedication" => new HaveSpecificFeat("UnexpectedSharpshooterDedication"),
                "master in Deception, Unexpected Sharpshooter Dedication" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificSkillProficiency("Master", "Deception" ),
                    new HaveSpecificFeat("UnexpectedSharpshooterDedication")
                ),
                "trained in Deception, Unexpected Sharpshooter Dedication" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificSkillProficiency("Trained", "Athletics"), 
                    new HaveSpecificFeat("UnexpectedSharpshooterDedication")
                ),
                "Inventor Dedication" => new HaveSpecificFeat("InventorDedication"),
                "Basic Breakthrough" => new HaveSpecificFeat("BasicBreaktho"),
                "armor innovation" => new HaveSpecificInnovation("Armor"),
                "construct innovation" => new HaveSpecificInnovation("Construct"),
                "Megaton Strike" => new HaveSpecificFeat("MegatonStrike"),
                "construct companion" => ,
                "armor innovation, construct innovation, or weapon innovation" => BooleanPrerequisite.Or(templater,
                    new HaveSpecificInnovation("Armor"),
                    new HaveSpecificInnovation("Construct"),
                    new HaveSpecificInnovation("Weapon")
                ),
                "Advanced Construct Companion" => new HaveSpecificFeat("AdvancedConstructCompanion"),
                "weapon innovation" => new HaveSpecificInnovation("Weapon"),
                "initial modification" => new HaveSpecificClassFeature("InitialModification", "Gunslingers"),
                "Gadget Specialist" => new HaveSpecificFeat("GadgetSpecialist"),
                "Overdrive" => new HaveSpecificFeat("Overdrive"),
                "offensive boost" => new HaveSpecificClassFeature("OffensiveBoost", "Gunslingers"),
                "Megavolt" => new HaveSpecificFeat("Megavolt"),
                "Overdrive Ally" => new HaveSpecificFeat("OverdriveAlly"),
                "Shared Overdrive" => new HaveSpecificFeat("SharedOverdrive"),
                "Overwatch Dedication" => new HaveSpecificFeat("OverwatchDedication"),
                "Overwatch Dedication, master in Perception" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("OverwatchDedication"), new HaveSpecificSkillProficiency("Master", "Percepton")),
                "Overwatch Dedication, expert in Perception" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("OverwatchDedication"), new HaveSpecificSkillProficiency("Expert", "Perception")),
                "Sterling Dynamo Dedication" => new HaveSpecificFeat("SterlingDynamoDedication"),
                "Snarecrafter Dedication or Snare Specialist" => BooleanPrerequisite.Or(templater,
                    new HaveSpecificFeat("SnarecrafterDedication"),
                    new HaveSpecificFeat("SnareSpecialist")
                ),
                "Trapsmith Dedication, expert in Crafting" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("TrapsmithDedication"), new HaveSpecificSkillProficiency("Expert", "Crafting")),
                "Trapsmith Dedication, master in Crafting" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("TrapsmithDedication"), new HaveSpecificSkillProficiency("Master", "Crafting")),
                "Trapsmith Dedication" => new HaveSpecificFeat("TrapsmithDedication"),
                "Trick Driver Dedication" => new HaveSpecificFeat("TrickDriverDedication"),
                "Trick Driver Dedication, expert in Driving Lore" => BooleanPrerequisite.And(templater,
                    new HaveSpecificFeat("TrickDriverDedication"),
                    new HaveSpecificLoreSpecificProficiency("Expert", "Driving")
                ),
                "Trick Driver Dedication, master in Driving Lore" => BooleanPrerequisite.And(templater,
                    new HaveSpecificFeat("TrickDriverDedication"),
                    new HaveSpecificLoreSpecificProficiency("Master", "Driving")
                ),
                "Intelligence 14, trained in Crafting" => BooleanPrerequisite.And(templater, new HaveSpecificStat(14, "Intelligence"), new HaveSpecificSkillProficiency("Trained", "Crafting")),
                "Vehicle Mechanic Dedication, expert in Crafting" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("VehicleMechanicDedication"), new HaveSpecificSkillProficiency("Expert", "Crafting")),
                "Vehicle Mechanic Dedication" => new HaveSpecificFeat("VehicleMechanicDedication"),
                "Vehicle Mechanic Dedication, master in Crafting" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("VehicleMechanicDedication"), new HaveSpecificSkillProficiency("Master", "Crafting")),
                "way of the spellshot" => new HaveSpecificGunslingersWay("WayOfTheSpellshot"),
                "Spellshot Dedication" => new HaveSpecificFeat("SpellshotDedication"),
                "Spellshot Dedication, master in Arcana" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("SpellshotDedication"), new HaveSpecificSkillProficiency("Master", "Arcana")),
                "Explosive Savant" => new HaveSpecificFeat("ExplosiveSavant"),
                "worshipper of Torag or Angradd" => BooleanPrerequisite.Or(templater, 
                    new WorshipSpecificDeity("Torag"),
                    new WorshipSpecificDeity("Angradd")
                ),
                "Demolitionist Dedication" => new HaveSpecificFeat("DemolitionistDedication"),
                "Demolitionist Dedication, master in Engineering Lore" => BooleanPrerequisite.And(templater,
                    new HaveSpecificFeat("DemolitionistDedication"),
                    new HaveSpecificLoreSpecificProficiency("Master", "Engineering")
                ),
                "Demolitionist Dedication; Calculated Splash, Directional Bombs, or Expanded Splash" => BooleanPrerequisite.And(templater,
                    new HaveSpecificFeat("DemolitionistDedication"),
                    BooleanPrerequisite.Or(templater, 
                        new HaveSpecificFeat("CalculatedSplash"),
                        new HaveSpecificFeat("DirectionalBombs"),
                        new HaveSpecificFeat("ExpandedSplash")
                    )
                ),
                "Firework Technician Dedication" => new HaveSpecificFeat("FireworkTechnicianDedication"),
                "Firework Technician Dedication, expert in Crafting" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("FireworkTechnicianDedication"), new HaveSpecificSkillProficiency("Expert", "Crafting")),
                "Basic Shooting" => new HaveSpecificFeat("BasicShooting"),
                "Gunslinger Dedication, expert in any kind of weapon or unarmed attack" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificFeat("GunslingerDedication"),
                    BooleanPrerequisite.Or(templater, 
                        new HaveAnyWeaponCategorySpecificProficiency("Expert"),
                        new HaveAnyWeaponGroupSpecificProficiency("Expert"),
                        new HaveAnyMeleeWeaponSpecificProficiency("Expert"),
                        new HaveAnyRangedWeaponSpecificProficiency("Expert")
                    )
                ),
                "Gunslinger Dedication" => new HaveSpecificFeat("GunslingerDedication"),
                "Gunslinger Dedication, expert in Perception" => BooleanPrerequisite.And(templater, new HaveSpecificFeat("GunslingerDedication"), new HaveSpecificSkillProficiency("Expert", "Perception")),
                "expert with at least one type of firearm, trained in Arcana or Crafting, you own a beast gun and have slain the type of creature associated with your beast gun in a fair hunt" => BooleanPrerequisite.And(templater, 
                    new HaveSpecificWeaponGroupSpecificProficiency("Expert", "Firearm"),
                    BooleanPrerequisite.Or(templater, 
                        new HaveSpecificSkillProficiency("Trained", "Arcana"),
                        new HaveSpecificSkillProficiency("Trained", "Crafting")),
                    new Manual("You own a beast gun and have slain the type of creature associated with your beast gun in a fair hunt.")
                ),
                "Beast Gunner Dedication" => new HaveSpecificFeat("BeastGunnerDedication"),
                "Basic Beast Gunner Spellcasting" => new HaveSpecificFeat("BasicBeastGunnerSpellcasting"),
                "Expert Beast Gunner Spellcasting" => new HaveSpecificFeat("ExpertBeastGunnerSpellcasting"),
            };
        }
    }
}
